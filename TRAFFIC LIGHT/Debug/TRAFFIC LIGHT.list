
TRAFFIC LIGHT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000646c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e0  080065e0  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  080065e0  080065e0  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065e0  080065e0  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080065e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  200000f8  080066e0  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  080066e0  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001315e  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b44  00000000  00000000  0003327f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00035dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00036e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003daf  00000000  00000000  00037dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156ac  00000000  00000000  0003bb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd4a  00000000  00000000  0005121b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000def65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  000defb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f8 	.word	0x200000f8
 8000128:	00000000 	.word	0x00000000
 800012c:	08006560 	.word	0x08006560

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000fc 	.word	0x200000fc
 8000148:	08006560 	.word	0x08006560

0800014c <isButtonPressed>:
//        }
//    }
//    return 0;  // Return 0 if no button was long-pressed
//}

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(buttons[index].flag == 1){
 8000154:	490e      	ldr	r1, [pc, #56]	; (8000190 <isButtonPressed+0x44>)
 8000156:	687a      	ldr	r2, [r7, #4]
 8000158:	4613      	mov	r3, r2
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	4413      	add	r3, r2
 800015e:	00db      	lsls	r3, r3, #3
 8000160:	440b      	add	r3, r1
 8000162:	331c      	adds	r3, #28
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2b01      	cmp	r3, #1
 8000168:	d10b      	bne.n	8000182 <isButtonPressed+0x36>
		buttons[index].flag = 0;
 800016a:	4909      	ldr	r1, [pc, #36]	; (8000190 <isButtonPressed+0x44>)
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	4613      	mov	r3, r2
 8000170:	009b      	lsls	r3, r3, #2
 8000172:	4413      	add	r3, r2
 8000174:	00db      	lsls	r3, r3, #3
 8000176:	440b      	add	r3, r1
 8000178:	331c      	adds	r3, #28
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
		return 1;
 800017e:	2301      	movs	r3, #1
 8000180:	e000      	b.n	8000184 <isButtonPressed+0x38>
	}
	return 0;
 8000182:	2300      	movs	r3, #0
}
 8000184:	4618      	mov	r0, r3
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000000 	.word	0x20000000

08000194 <isButtonLongPressed>:

int isButtonLongPressed(int index){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if(buttons[index].long_pressed == 1){
 800019c:	490e      	ldr	r1, [pc, #56]	; (80001d8 <isButtonLongPressed+0x44>)
 800019e:	687a      	ldr	r2, [r7, #4]
 80001a0:	4613      	mov	r3, r2
 80001a2:	009b      	lsls	r3, r3, #2
 80001a4:	4413      	add	r3, r2
 80001a6:	00db      	lsls	r3, r3, #3
 80001a8:	440b      	add	r3, r1
 80001aa:	3320      	adds	r3, #32
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d10b      	bne.n	80001ca <isButtonLongPressed+0x36>
		buttons[index].long_pressed = 0;
 80001b2:	4909      	ldr	r1, [pc, #36]	; (80001d8 <isButtonLongPressed+0x44>)
 80001b4:	687a      	ldr	r2, [r7, #4]
 80001b6:	4613      	mov	r3, r2
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	4413      	add	r3, r2
 80001bc:	00db      	lsls	r3, r3, #3
 80001be:	440b      	add	r3, r1
 80001c0:	3320      	adds	r3, #32
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
		return 1;
 80001c6:	2301      	movs	r3, #1
 80001c8:	e000      	b.n	80001cc <isButtonLongPressed+0x38>
	}
	return 0;
 80001ca:	2300      	movs	r3, #0
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000000 	.word	0x20000000

080001dc <getKeyInput>:
//        	}
//        }
//    }
//  }
//}
void getKeyInput() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
    for (int index = 0; index < NUM_BUTTONS; index++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e0f4      	b.n	80003d2 <getKeyInput+0x1f6>
        buttons[index].KeyReg2 = buttons[index].KeyReg1;
 80001e8:	497e      	ldr	r1, [pc, #504]	; (80003e4 <getKeyInput+0x208>)
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	00db      	lsls	r3, r3, #3
 80001f4:	440b      	add	r3, r1
 80001f6:	330c      	adds	r3, #12
 80001f8:	6819      	ldr	r1, [r3, #0]
 80001fa:	487a      	ldr	r0, [pc, #488]	; (80003e4 <getKeyInput+0x208>)
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	4403      	add	r3, r0
 8000208:	3310      	adds	r3, #16
 800020a:	6019      	str	r1, [r3, #0]
        buttons[index].KeyReg1 = buttons[index].KeyReg0;
 800020c:	4975      	ldr	r1, [pc, #468]	; (80003e4 <getKeyInput+0x208>)
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	4613      	mov	r3, r2
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	4413      	add	r3, r2
 8000216:	00db      	lsls	r3, r3, #3
 8000218:	440b      	add	r3, r1
 800021a:	3308      	adds	r3, #8
 800021c:	6819      	ldr	r1, [r3, #0]
 800021e:	4871      	ldr	r0, [pc, #452]	; (80003e4 <getKeyInput+0x208>)
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	4613      	mov	r3, r2
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	4413      	add	r3, r2
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	4403      	add	r3, r0
 800022c:	330c      	adds	r3, #12
 800022e:	6019      	str	r1, [r3, #0]
        // Read the current state of the button
        buttons[index].KeyReg0 = HAL_GPIO_ReadPin(buttons[index].GPIO_Port, buttons[index].GPIO_Pin);
 8000230:	496c      	ldr	r1, [pc, #432]	; (80003e4 <getKeyInput+0x208>)
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4613      	mov	r3, r2
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	00db      	lsls	r3, r3, #3
 800023c:	440b      	add	r3, r1
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	4968      	ldr	r1, [pc, #416]	; (80003e4 <getKeyInput+0x208>)
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	4613      	mov	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4413      	add	r3, r2
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	440b      	add	r3, r1
 800024e:	3304      	adds	r3, #4
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	4619      	mov	r1, r3
 8000254:	f002 fa12 	bl	800267c <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	4618      	mov	r0, r3
 800025c:	4961      	ldr	r1, [pc, #388]	; (80003e4 <getKeyInput+0x208>)
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4613      	mov	r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4413      	add	r3, r2
 8000266:	00db      	lsls	r3, r3, #3
 8000268:	440b      	add	r3, r1
 800026a:	3308      	adds	r3, #8
 800026c:	6018      	str	r0, [r3, #0]

        // Check for stable button state
        if ((buttons[index].KeyReg1 == buttons[index].KeyReg0) && (buttons[index].KeyReg1 == buttons[index].KeyReg2)) {
 800026e:	495d      	ldr	r1, [pc, #372]	; (80003e4 <getKeyInput+0x208>)
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	440b      	add	r3, r1
 800027c:	330c      	adds	r3, #12
 800027e:	6819      	ldr	r1, [r3, #0]
 8000280:	4858      	ldr	r0, [pc, #352]	; (80003e4 <getKeyInput+0x208>)
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4613      	mov	r3, r2
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	4413      	add	r3, r2
 800028a:	00db      	lsls	r3, r3, #3
 800028c:	4403      	add	r3, r0
 800028e:	3308      	adds	r3, #8
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4299      	cmp	r1, r3
 8000294:	f040 809a 	bne.w	80003cc <getKeyInput+0x1f0>
 8000298:	4952      	ldr	r1, [pc, #328]	; (80003e4 <getKeyInput+0x208>)
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	4613      	mov	r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	4413      	add	r3, r2
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	440b      	add	r3, r1
 80002a6:	330c      	adds	r3, #12
 80002a8:	6819      	ldr	r1, [r3, #0]
 80002aa:	484e      	ldr	r0, [pc, #312]	; (80003e4 <getKeyInput+0x208>)
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4613      	mov	r3, r2
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	4403      	add	r3, r0
 80002b8:	3310      	adds	r3, #16
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4299      	cmp	r1, r3
 80002be:	f040 8085 	bne.w	80003cc <getKeyInput+0x1f0>
            if (buttons[index].KeyReg2 != buttons[index].KeyReg3) {
 80002c2:	4948      	ldr	r1, [pc, #288]	; (80003e4 <getKeyInput+0x208>)
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	4613      	mov	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	4413      	add	r3, r2
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	440b      	add	r3, r1
 80002d0:	3310      	adds	r3, #16
 80002d2:	6819      	ldr	r1, [r3, #0]
 80002d4:	4843      	ldr	r0, [pc, #268]	; (80003e4 <getKeyInput+0x208>)
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	4613      	mov	r3, r2
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4403      	add	r3, r0
 80002e2:	3314      	adds	r3, #20
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4299      	cmp	r1, r3
 80002e8:	d032      	beq.n	8000350 <getKeyInput+0x174>
                buttons[index].KeyReg3 = buttons[index].KeyReg2;
 80002ea:	493e      	ldr	r1, [pc, #248]	; (80003e4 <getKeyInput+0x208>)
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4613      	mov	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	440b      	add	r3, r1
 80002f8:	3310      	adds	r3, #16
 80002fa:	6819      	ldr	r1, [r3, #0]
 80002fc:	4839      	ldr	r0, [pc, #228]	; (80003e4 <getKeyInput+0x208>)
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4613      	mov	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	4403      	add	r3, r0
 800030a:	3314      	adds	r3, #20
 800030c:	6019      	str	r1, [r3, #0]

                // Check if button is in pressed state
                if (buttons[index].KeyReg3 == PRESSED_STATE) {
 800030e:	4935      	ldr	r1, [pc, #212]	; (80003e4 <getKeyInput+0x208>)
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4613      	mov	r3, r2
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	440b      	add	r3, r1
 800031c:	3314      	adds	r3, #20
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d153      	bne.n	80003cc <getKeyInput+0x1f0>
                    buttons[index].TimeOutForKeyPress = 500;
 8000324:	492f      	ldr	r1, [pc, #188]	; (80003e4 <getKeyInput+0x208>)
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	4613      	mov	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	440b      	add	r3, r1
 8000332:	3318      	adds	r3, #24
 8000334:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000338:	601a      	str	r2, [r3, #0]
                    buttons[index].flag = 1;
 800033a:	492a      	ldr	r1, [pc, #168]	; (80003e4 <getKeyInput+0x208>)
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4613      	mov	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4413      	add	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	440b      	add	r3, r1
 8000348:	331c      	adds	r3, #28
 800034a:	2201      	movs	r2, #1
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	e03d      	b.n	80003cc <getKeyInput+0x1f0>
                }

            } else {
                // Decrease timeout if button is held down
                buttons[index].TimeOutForKeyPress--;
 8000350:	4924      	ldr	r1, [pc, #144]	; (80003e4 <getKeyInput+0x208>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	440b      	add	r3, r1
 800035e:	3318      	adds	r3, #24
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1e59      	subs	r1, r3, #1
 8000364:	481f      	ldr	r0, [pc, #124]	; (80003e4 <getKeyInput+0x208>)
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	4613      	mov	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	4403      	add	r3, r0
 8000372:	3318      	adds	r3, #24
 8000374:	6019      	str	r1, [r3, #0]
                if (buttons[index].TimeOutForKeyPress == 0) {
 8000376:	491b      	ldr	r1, [pc, #108]	; (80003e4 <getKeyInput+0x208>)
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	440b      	add	r3, r1
 8000384:	3318      	adds	r3, #24
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d11f      	bne.n	80003cc <getKeyInput+0x1f0>
                    buttons[index].TimeOutForKeyPress = 500;
 800038c:	4915      	ldr	r1, [pc, #84]	; (80003e4 <getKeyInput+0x208>)
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	4613      	mov	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	440b      	add	r3, r1
 800039a:	3318      	adds	r3, #24
 800039c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003a0:	601a      	str	r2, [r3, #0]
                    if (buttons[index].KeyReg3 == PRESSED_STATE) {
 80003a2:	4910      	ldr	r1, [pc, #64]	; (80003e4 <getKeyInput+0x208>)
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	4613      	mov	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	440b      	add	r3, r1
 80003b0:	3314      	adds	r3, #20
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d109      	bne.n	80003cc <getKeyInput+0x1f0>
                        buttons[index].long_pressed = 1;
 80003b8:	490a      	ldr	r1, [pc, #40]	; (80003e4 <getKeyInput+0x208>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	4613      	mov	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	440b      	add	r3, r1
 80003c6:	3320      	adds	r3, #32
 80003c8:	2201      	movs	r2, #1
 80003ca:	601a      	str	r2, [r3, #0]
    for (int index = 0; index < NUM_BUTTONS; index++) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	f77f af07 	ble.w	80001e8 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000000 	.word	0x20000000

080003e8 <fsm_automatic_run>:
extern int TIME_FOR_RED;
extern int TIME_FOR_AMBER;
extern int time_green;
extern int time_red;
extern int time_amber;
void fsm_automatic_run(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	switch(status){
 80003ec:	4ba4      	ldr	r3, [pc, #656]	; (8000680 <fsm_automatic_run+0x298>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	f200 8226 	bhi.w	8000844 <fsm_automatic_run+0x45c>
 80003f8:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <fsm_automatic_run+0x18>)
 80003fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fe:	bf00      	nop
 8000400:	08000415 	.word	0x08000415
 8000404:	080004d9 	.word	0x080004d9
 8000408:	080005b1 	.word	0x080005b1
 800040c:	080006a1 	.word	0x080006a1
 8000410:	08000777 	.word	0x08000777
	case INIT:
		init();
 8000414:	f001 fa64 	bl	80018e0 <init>
		if(1){

			setTimer(0, (time_green+1)*1000);
 8000418:	4b9a      	ldr	r3, [pc, #616]	; (8000684 <fsm_automatic_run+0x29c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	4619      	mov	r1, r3
 8000428:	2000      	movs	r0, #0
 800042a:	f001 f887 	bl	800153c <setTimer>
		    setTimer(9, 100); // for scan led
 800042e:	2164      	movs	r1, #100	; 0x64
 8000430:	2009      	movs	r0, #9
 8000432:	f001 f883 	bl	800153c <setTimer>
		    setTimer(1, 1000); // for display 7 seg
 8000436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800043a:	2001      	movs	r0, #1
 800043c:	f001 f87e 	bl	800153c <setTimer>
		    setTimer(8, 1000); // signal timer
 8000440:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000444:	2008      	movs	r0, #8
 8000446:	f001 f879 	bl	800153c <setTimer>
		    status = AUTO_GREEN_RED;
 800044a:	4b8d      	ldr	r3, [pc, #564]	; (8000680 <fsm_automatic_run+0x298>)
 800044c:	2202      	movs	r2, #2
 800044e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff fe7b 	bl	800014c <isButtonPressed>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d105      	bne.n	8000468 <fsm_automatic_run+0x80>
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fe99 	bl	8000194 <isButtonLongPressed>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d00e      	beq.n	8000486 <fsm_automatic_run+0x9e>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	4886      	ldr	r0, [pc, #536]	; (8000688 <fsm_automatic_run+0x2a0>)
 800046e:	f002 f934 	bl	80026da <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 8000472:	4b83      	ldr	r3, [pc, #524]	; (8000680 <fsm_automatic_run+0x298>)
 8000474:	2216      	movs	r2, #22
 8000476:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000478:	f001 fc92 	bl	8001da0 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 800047c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000480:	2003      	movs	r0, #3
 8000482:	f001 f85b 	bl	800153c <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff fe60 	bl	800014c <isButtonPressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d105      	bne.n	800049e <fsm_automatic_run+0xb6>
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff fe7e 	bl	8000194 <isButtonLongPressed>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d009      	beq.n	80004b2 <fsm_automatic_run+0xca>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800049e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a2:	4879      	ldr	r0, [pc, #484]	; (8000688 <fsm_automatic_run+0x2a0>)
 80004a4:	f002 f919 	bl	80026da <HAL_GPIO_TogglePin>
			clear_all_led();
 80004a8:	f001 fc7a 	bl	8001da0 <clear_all_led>
			status = MANUAL_GREEN_RED;
 80004ac:	4b74      	ldr	r3, [pc, #464]	; (8000680 <fsm_automatic_run+0x298>)
 80004ae:	2220      	movs	r2, #32
 80004b0:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 80004b2:	2002      	movs	r0, #2
 80004b4:	f7ff fe4a 	bl	800014c <isButtonPressed>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d106      	bne.n	80004cc <fsm_automatic_run+0xe4>
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff fe68 	bl	8000194 <isButtonLongPressed>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	f000 81be 	beq.w	8000848 <fsm_automatic_run+0x460>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80004cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d0:	486d      	ldr	r0, [pc, #436]	; (8000688 <fsm_automatic_run+0x2a0>)
 80004d2:	f002 f902 	bl	80026da <HAL_GPIO_TogglePin>
		}
		break;
 80004d6:	e1b7      	b.n	8000848 <fsm_automatic_run+0x460>
	case AUTO_GREEN_RED:
		auto_green_red();
 80004d8:	f001 fa32 	bl	8001940 <auto_green_red>
		if(timers[0].flag == 1) // flag for transition
 80004dc:	4b6b      	ldr	r3, [pc, #428]	; (800068c <fsm_automatic_run+0x2a4>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d121      	bne.n	8000528 <fsm_automatic_run+0x140>
		{
			time_green = TIME_FOR_GREEN;
 80004e4:	4b6a      	ldr	r3, [pc, #424]	; (8000690 <fsm_automatic_run+0x2a8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a66      	ldr	r2, [pc, #408]	; (8000684 <fsm_automatic_run+0x29c>)
 80004ea:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1 ;
 80004ec:	4b69      	ldr	r3, [pc, #420]	; (8000694 <fsm_automatic_run+0x2ac>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b67      	ldr	r3, [pc, #412]	; (8000690 <fsm_automatic_run+0x2a8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	3b01      	subs	r3, #1
 80004f8:	4a67      	ldr	r2, [pc, #412]	; (8000698 <fsm_automatic_run+0x2b0>)
 80004fa:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80004fc:	4b65      	ldr	r3, [pc, #404]	; (8000694 <fsm_automatic_run+0x2ac>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b63      	ldr	r3, [pc, #396]	; (8000690 <fsm_automatic_run+0x2a8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	3b01      	subs	r3, #1
 8000508:	4a64      	ldr	r2, [pc, #400]	; (800069c <fsm_automatic_run+0x2b4>)
 800050a:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_amber+1)*1000);
 800050c:	4b62      	ldr	r3, [pc, #392]	; (8000698 <fsm_automatic_run+0x2b0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	4619      	mov	r1, r3
 800051c:	2000      	movs	r0, #0
 800051e:	f001 f80d 	bl	800153c <setTimer>
			status = AUTO_AMBER_RED;
 8000522:	4b57      	ldr	r3, [pc, #348]	; (8000680 <fsm_automatic_run+0x298>)
 8000524:	2203      	movs	r2, #3
 8000526:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff fe0f 	bl	800014c <isButtonPressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d105      	bne.n	8000540 <fsm_automatic_run+0x158>
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fe2d 	bl	8000194 <isButtonLongPressed>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00e      	beq.n	800055e <fsm_automatic_run+0x176>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000544:	4850      	ldr	r0, [pc, #320]	; (8000688 <fsm_automatic_run+0x2a0>)
 8000546:	f002 f8c8 	bl	80026da <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 800054a:	4b4d      	ldr	r3, [pc, #308]	; (8000680 <fsm_automatic_run+0x298>)
 800054c:	2216      	movs	r2, #22
 800054e:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000550:	f001 fc26 	bl	8001da0 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000554:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000558:	2003      	movs	r0, #3
 800055a:	f000 ffef 	bl	800153c <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fdf4 	bl	800014c <isButtonPressed>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <fsm_automatic_run+0x18e>
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff fe12 	bl	8000194 <isButtonLongPressed>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d009      	beq.n	800058a <fsm_automatic_run+0x1a2>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057a:	4843      	ldr	r0, [pc, #268]	; (8000688 <fsm_automatic_run+0x2a0>)
 800057c:	f002 f8ad 	bl	80026da <HAL_GPIO_TogglePin>
			clear_all_led();
 8000580:	f001 fc0e 	bl	8001da0 <clear_all_led>
			status = MANUAL_GREEN_RED;
 8000584:	4b3e      	ldr	r3, [pc, #248]	; (8000680 <fsm_automatic_run+0x298>)
 8000586:	2220      	movs	r2, #32
 8000588:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff fdde 	bl	800014c <isButtonPressed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d106      	bne.n	80005a4 <fsm_automatic_run+0x1bc>
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff fdfc 	bl	8000194 <isButtonLongPressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	f000 8154 	beq.w	800084c <fsm_automatic_run+0x464>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80005a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a8:	4837      	ldr	r0, [pc, #220]	; (8000688 <fsm_automatic_run+0x2a0>)
 80005aa:	f002 f896 	bl	80026da <HAL_GPIO_TogglePin>
		}
		break;
 80005ae:	e14d      	b.n	800084c <fsm_automatic_run+0x464>
	case AUTO_AMBER_RED:
		auto_amber_red();
 80005b0:	f001 fa1c 	bl	80019ec <auto_amber_red>
		if(timers[0].flag == 1){
 80005b4:	4b35      	ldr	r3, [pc, #212]	; (800068c <fsm_automatic_run+0x2a4>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d11d      	bne.n	80005f8 <fsm_automatic_run+0x210>
			time_red = TIME_FOR_RED;
 80005bc:	4b35      	ldr	r3, [pc, #212]	; (8000694 <fsm_automatic_run+0x2ac>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a36      	ldr	r2, [pc, #216]	; (800069c <fsm_automatic_run+0x2b4>)
 80005c2:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80005c4:	4b33      	ldr	r3, [pc, #204]	; (8000694 <fsm_automatic_run+0x2ac>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b31      	ldr	r3, [pc, #196]	; (8000690 <fsm_automatic_run+0x2a8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a31      	ldr	r2, [pc, #196]	; (8000698 <fsm_automatic_run+0x2b0>)
 80005d2:	6013      	str	r3, [r2, #0]
			time_green = TIME_FOR_GREEN;
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <fsm_automatic_run+0x2a8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <fsm_automatic_run+0x29c>)
 80005da:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_green+1)*1000);
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <fsm_automatic_run+0x29c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 ffa5 	bl	800153c <setTimer>
			status = AUTO_RED_GREEN;
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <fsm_automatic_run+0x298>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fda7 	bl	800014c <isButtonPressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d105      	bne.n	8000610 <fsm_automatic_run+0x228>
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff fdc5 	bl	8000194 <isButtonLongPressed>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00e      	beq.n	800062e <fsm_automatic_run+0x246>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <fsm_automatic_run+0x2a0>)
 8000616:	f002 f860 	bl	80026da <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <fsm_automatic_run+0x298>)
 800061c:	2216      	movs	r2, #22
 800061e:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000620:	f001 fbbe 	bl	8001da0 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000624:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000628:	2003      	movs	r0, #3
 800062a:	f000 ff87 	bl	800153c <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff fd8c 	bl	800014c <isButtonPressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d105      	bne.n	8000646 <fsm_automatic_run+0x25e>
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fdaa 	bl	8000194 <isButtonLongPressed>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d009      	beq.n	800065a <fsm_automatic_run+0x272>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064a:	480f      	ldr	r0, [pc, #60]	; (8000688 <fsm_automatic_run+0x2a0>)
 800064c:	f002 f845 	bl	80026da <HAL_GPIO_TogglePin>
			clear_all_led();
 8000650:	f001 fba6 	bl	8001da0 <clear_all_led>
			status = MANUAL_GREEN_RED;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <fsm_automatic_run+0x298>)
 8000656:	2220      	movs	r2, #32
 8000658:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 800065a:	2002      	movs	r0, #2
 800065c:	f7ff fd76 	bl	800014c <isButtonPressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d106      	bne.n	8000674 <fsm_automatic_run+0x28c>
 8000666:	2002      	movs	r0, #2
 8000668:	f7ff fd94 	bl	8000194 <isButtonLongPressed>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	f000 80ee 	beq.w	8000850 <fsm_automatic_run+0x468>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <fsm_automatic_run+0x2a0>)
 800067a:	f002 f82e 	bl	80026da <HAL_GPIO_TogglePin>
		}
		break;
 800067e:	e0e7      	b.n	8000850 <fsm_automatic_run+0x468>
 8000680:	20000138 	.word	0x20000138
 8000684:	20000590 	.word	0x20000590
 8000688:	40011000 	.word	0x40011000
 800068c:	20000540 	.word	0x20000540
 8000690:	20000080 	.word	0x20000080
 8000694:	20000084 	.word	0x20000084
 8000698:	20000598 	.word	0x20000598
 800069c:	20000594 	.word	0x20000594
	case AUTO_RED_GREEN:
		auto_red_green();
 80006a0:	f001 f9fa 	bl	8001a98 <auto_red_green>
		if(timers[0].flag == 1){
 80006a4:	4b6e      	ldr	r3, [pc, #440]	; (8000860 <fsm_automatic_run+0x478>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d121      	bne.n	80006f0 <fsm_automatic_run+0x308>
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 80006ac:	4b6d      	ldr	r3, [pc, #436]	; (8000864 <fsm_automatic_run+0x47c>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b6d      	ldr	r3, [pc, #436]	; (8000868 <fsm_automatic_run+0x480>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	3b01      	subs	r3, #1
 80006b8:	4a6c      	ldr	r2, [pc, #432]	; (800086c <fsm_automatic_run+0x484>)
 80006ba:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED-TIME_FOR_GREEN - 1;
 80006bc:	4b69      	ldr	r3, [pc, #420]	; (8000864 <fsm_automatic_run+0x47c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b69      	ldr	r3, [pc, #420]	; (8000868 <fsm_automatic_run+0x480>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a69      	ldr	r2, [pc, #420]	; (8000870 <fsm_automatic_run+0x488>)
 80006ca:	6013      	str	r3, [r2, #0]
			time_green = TIME_FOR_GREEN;
 80006cc:	4b66      	ldr	r3, [pc, #408]	; (8000868 <fsm_automatic_run+0x480>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a68      	ldr	r2, [pc, #416]	; (8000874 <fsm_automatic_run+0x48c>)
 80006d2:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_amber+1)*1000);
 80006d4:	4b65      	ldr	r3, [pc, #404]	; (800086c <fsm_automatic_run+0x484>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 ff29 	bl	800153c <setTimer>
			status = AUTO_RED_AMBER;
 80006ea:	4b63      	ldr	r3, [pc, #396]	; (8000878 <fsm_automatic_run+0x490>)
 80006ec:	2205      	movs	r2, #5
 80006ee:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff fd2b 	bl	800014c <isButtonPressed>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d105      	bne.n	8000708 <fsm_automatic_run+0x320>
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fd49 	bl	8000194 <isButtonLongPressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00e      	beq.n	8000726 <fsm_automatic_run+0x33e>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	485b      	ldr	r0, [pc, #364]	; (800087c <fsm_automatic_run+0x494>)
 800070e:	f001 ffe4 	bl	80026da <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 8000712:	4b59      	ldr	r3, [pc, #356]	; (8000878 <fsm_automatic_run+0x490>)
 8000714:	2216      	movs	r2, #22
 8000716:	601a      	str	r2, [r3, #0]
			clear_all_led();
 8000718:	f001 fb42 	bl	8001da0 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 800071c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000720:	2003      	movs	r0, #3
 8000722:	f000 ff0b 	bl	800153c <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fd10 	bl	800014c <isButtonPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <fsm_automatic_run+0x356>
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fd2e 	bl	8000194 <isButtonLongPressed>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d009      	beq.n	8000752 <fsm_automatic_run+0x36a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	484e      	ldr	r0, [pc, #312]	; (800087c <fsm_automatic_run+0x494>)
 8000744:	f001 ffc9 	bl	80026da <HAL_GPIO_TogglePin>
			clear_all_led();
 8000748:	f001 fb2a 	bl	8001da0 <clear_all_led>
			status = MANUAL_GREEN_RED;
 800074c:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <fsm_automatic_run+0x490>)
 800074e:	2220      	movs	r2, #32
 8000750:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff fcfa 	bl	800014c <isButtonPressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d105      	bne.n	800076a <fsm_automatic_run+0x382>
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fd18 	bl	8000194 <isButtonLongPressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d074      	beq.n	8000854 <fsm_automatic_run+0x46c>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800076a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076e:	4843      	ldr	r0, [pc, #268]	; (800087c <fsm_automatic_run+0x494>)
 8000770:	f001 ffb3 	bl	80026da <HAL_GPIO_TogglePin>
		}
		break;
 8000774:	e06e      	b.n	8000854 <fsm_automatic_run+0x46c>
	case AUTO_RED_AMBER:
		auto_red_amber();
 8000776:	f001 f9e5 	bl	8001b44 <auto_red_amber>
		if(timers[0].flag == 1){
 800077a:	4b39      	ldr	r3, [pc, #228]	; (8000860 <fsm_automatic_run+0x478>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d11d      	bne.n	80007be <fsm_automatic_run+0x3d6>
			time_green = TIME_FOR_GREEN;
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <fsm_automatic_run+0x480>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a3b      	ldr	r2, [pc, #236]	; (8000874 <fsm_automatic_run+0x48c>)
 8000788:	6013      	str	r3, [r2, #0]
			time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 800078a:	4b36      	ldr	r3, [pc, #216]	; (8000864 <fsm_automatic_run+0x47c>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <fsm_automatic_run+0x480>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	3b01      	subs	r3, #1
 8000796:	4a35      	ldr	r2, [pc, #212]	; (800086c <fsm_automatic_run+0x484>)
 8000798:	6013      	str	r3, [r2, #0]
			time_red = TIME_FOR_RED;
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <fsm_automatic_run+0x47c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a34      	ldr	r2, [pc, #208]	; (8000870 <fsm_automatic_run+0x488>)
 80007a0:	6013      	str	r3, [r2, #0]
			setTimer(0, (time_green+1)*1000);
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <fsm_automatic_run+0x48c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ac:	fb02 f303 	mul.w	r3, r2, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 fec2 	bl	800153c <setTimer>
			status = AUTO_GREEN_RED;
 80007b8:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <fsm_automatic_run+0x490>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fcc4 	bl	800014c <isButtonPressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d105      	bne.n	80007d6 <fsm_automatic_run+0x3ee>
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fce2 	bl	8000194 <isButtonLongPressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00e      	beq.n	80007f4 <fsm_automatic_run+0x40c>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80007d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007da:	4828      	ldr	r0, [pc, #160]	; (800087c <fsm_automatic_run+0x494>)
 80007dc:	f001 ff7d 	bl	80026da <HAL_GPIO_TogglePin>
			status = MODIFY_RED;
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <fsm_automatic_run+0x490>)
 80007e2:	2216      	movs	r2, #22
 80007e4:	601a      	str	r2, [r3, #0]
			clear_all_led();
 80007e6:	f001 fadb 	bl	8001da0 <clear_all_led>
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 80007ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007ee:	2003      	movs	r0, #3
 80007f0:	f000 fea4 	bl	800153c <setTimer>
		}
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fca9 	bl	800014c <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d105      	bne.n	800080c <fsm_automatic_run+0x424>
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff fcc7 	bl	8000194 <isButtonLongPressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d009      	beq.n	8000820 <fsm_automatic_run+0x438>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 800080c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000810:	481a      	ldr	r0, [pc, #104]	; (800087c <fsm_automatic_run+0x494>)
 8000812:	f001 ff62 	bl	80026da <HAL_GPIO_TogglePin>
			clear_all_led();
 8000816:	f001 fac3 	bl	8001da0 <clear_all_led>
			status = MANUAL_GREEN_RED;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <fsm_automatic_run+0x490>)
 800081c:	2220      	movs	r2, #32
 800081e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fc93 	bl	800014c <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d105      	bne.n	8000838 <fsm_automatic_run+0x450>
 800082c:	2002      	movs	r0, #2
 800082e:	f7ff fcb1 	bl	8000194 <isButtonLongPressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00f      	beq.n	8000858 <fsm_automatic_run+0x470>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <fsm_automatic_run+0x494>)
 800083e:	f001 ff4c 	bl	80026da <HAL_GPIO_TogglePin>
		}
		break;
 8000842:	e009      	b.n	8000858 <fsm_automatic_run+0x470>
	default:
		break;
 8000844:	bf00      	nop
 8000846:	e008      	b.n	800085a <fsm_automatic_run+0x472>
		break;
 8000848:	bf00      	nop
 800084a:	e006      	b.n	800085a <fsm_automatic_run+0x472>
		break;
 800084c:	bf00      	nop
 800084e:	e004      	b.n	800085a <fsm_automatic_run+0x472>
		break;
 8000850:	bf00      	nop
 8000852:	e002      	b.n	800085a <fsm_automatic_run+0x472>
		break;
 8000854:	bf00      	nop
 8000856:	e000      	b.n	800085a <fsm_automatic_run+0x472>
		break;
 8000858:	bf00      	nop
	}
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000540 	.word	0x20000540
 8000864:	20000084 	.word	0x20000084
 8000868:	20000080 	.word	0x20000080
 800086c:	20000598 	.word	0x20000598
 8000870:	20000594 	.word	0x20000594
 8000874:	20000590 	.word	0x20000590
 8000878:	20000138 	.word	0x20000138
 800087c:	40011000 	.word	0x40011000

08000880 <fsm_manual_run>:
 *  Created on: Nov 1, 2024
 *      Author: Administrator
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	switch(status){
 8000884:	4b41      	ldr	r3, [pc, #260]	; (800098c <fsm_manual_run+0x10c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b20      	cmp	r3, #32
 800088a:	d002      	beq.n	8000892 <fsm_manual_run+0x12>
 800088c:	2b21      	cmp	r3, #33	; 0x21
 800088e:	d03c      	beq.n	800090a <fsm_manual_run+0x8a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
			status = INIT;
		}
		break;
	default:
		break;
 8000890:	e07a      	b.n	8000988 <fsm_manual_run+0x108>
		manual_green_red();
 8000892:	f001 fabb 	bl	8001e0c <manual_green_red>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fc58 	bl	800014c <isButtonPressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d105      	bne.n	80008ae <fsm_manual_run+0x2e>
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fc76 	bl	8000194 <isButtonLongPressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <fsm_manual_run+0x38>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b2:	4837      	ldr	r0, [pc, #220]	; (8000990 <fsm_manual_run+0x110>)
 80008b4:	f001 ff11 	bl	80026da <HAL_GPIO_TogglePin>
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff fc47 	bl	800014c <isButtonPressed>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d105      	bne.n	80008d0 <fsm_manual_run+0x50>
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fc65 	bl	8000194 <isButtonLongPressed>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <fsm_manual_run+0x60>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d4:	482e      	ldr	r0, [pc, #184]	; (8000990 <fsm_manual_run+0x110>)
 80008d6:	f001 ff00 	bl	80026da <HAL_GPIO_TogglePin>
			status = MANUAL_RED_GREEN;
 80008da:	4b2c      	ldr	r3, [pc, #176]	; (800098c <fsm_manual_run+0x10c>)
 80008dc:	2221      	movs	r2, #33	; 0x21
 80008de:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fc33 	bl	800014c <isButtonPressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <fsm_manual_run+0x78>
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fc51 	bl	8000194 <isButtonLongPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d044      	beq.n	8000982 <fsm_manual_run+0x102>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80008f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fc:	4824      	ldr	r0, [pc, #144]	; (8000990 <fsm_manual_run+0x110>)
 80008fe:	f001 feec 	bl	80026da <HAL_GPIO_TogglePin>
			status = INIT;
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <fsm_manual_run+0x10c>)
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
		break;
 8000908:	e03b      	b.n	8000982 <fsm_manual_run+0x102>
		manual_red_green();
 800090a:	f001 fab9 	bl	8001e80 <manual_red_green>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fc1c 	bl	800014c <isButtonPressed>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d105      	bne.n	8000926 <fsm_manual_run+0xa6>
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fc3a 	bl	8000194 <isButtonLongPressed>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <fsm_manual_run+0xb0>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092a:	4819      	ldr	r0, [pc, #100]	; (8000990 <fsm_manual_run+0x110>)
 800092c:	f001 fed5 	bl	80026da <HAL_GPIO_TogglePin>
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fc0b 	bl	800014c <isButtonPressed>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d105      	bne.n	8000948 <fsm_manual_run+0xc8>
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fc29 	bl	8000194 <isButtonLongPressed>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <fsm_manual_run+0xd8>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4810      	ldr	r0, [pc, #64]	; (8000990 <fsm_manual_run+0x110>)
 800094e:	f001 fec4 	bl	80026da <HAL_GPIO_TogglePin>
			status = MANUAL_GREEN_RED;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <fsm_manual_run+0x10c>)
 8000954:	2220      	movs	r2, #32
 8000956:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000958:	2002      	movs	r0, #2
 800095a:	f7ff fbf7 	bl	800014c <isButtonPressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d105      	bne.n	8000970 <fsm_manual_run+0xf0>
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fc15 	bl	8000194 <isButtonLongPressed>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00a      	beq.n	8000986 <fsm_manual_run+0x106>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <fsm_manual_run+0x110>)
 8000976:	f001 feb0 	bl	80026da <HAL_GPIO_TogglePin>
			status = INIT;
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <fsm_manual_run+0x10c>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
		break;
 8000980:	e001      	b.n	8000986 <fsm_manual_run+0x106>
		break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <fsm_manual_run+0x108>
		break;
 8000986:	bf00      	nop
	}
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000138 	.word	0x20000138
 8000990:	40011000 	.word	0x40011000

08000994 <fsm_modify_run>:
extern int TIME_FOR_RED;
extern int TIME_FOR_AMBER;
extern int time_green;
extern int time_red;
extern int time_amber;
void fsm_modify_run(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	switch(status){
 8000998:	4b8b      	ldr	r3, [pc, #556]	; (8000bc8 <fsm_modify_run+0x234>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b18      	cmp	r3, #24
 800099e:	f000 80b7 	beq.w	8000b10 <fsm_modify_run+0x17c>
 80009a2:	2b18      	cmp	r3, #24
 80009a4:	f300 8106 	bgt.w	8000bb4 <fsm_modify_run+0x220>
 80009a8:	2b16      	cmp	r3, #22
 80009aa:	d002      	beq.n	80009b2 <fsm_modify_run+0x1e>
 80009ac:	2b17      	cmp	r3, #23
 80009ae:	d058      	beq.n	8000a62 <fsm_modify_run+0xce>
			newTime = 0;
			status = INIT;
		}
		break;
	default:
		break;
 80009b0:	e100      	b.n	8000bb4 <fsm_modify_run+0x220>
		modify_red_led();
 80009b2:	f001 f91d 	bl	8001bf0 <modify_red_led>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fbc8 	bl	800014c <isButtonPressed>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d105      	bne.n	80009ce <fsm_modify_run+0x3a>
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff fbe6 	bl	8000194 <isButtonLongPressed>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00f      	beq.n	80009ee <fsm_modify_run+0x5a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 80009ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d2:	487e      	ldr	r0, [pc, #504]	; (8000bcc <fsm_modify_run+0x238>)
 80009d4:	f001 fe81 	bl	80026da <HAL_GPIO_TogglePin>
			status = MODIFY_GREEN;
 80009d8:	4b7b      	ldr	r3, [pc, #492]	; (8000bc8 <fsm_modify_run+0x234>)
 80009da:	2217      	movs	r2, #23
 80009dc:	601a      	str	r2, [r3, #0]
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 80009de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009e2:	2003      	movs	r0, #3
 80009e4:	f000 fdaa 	bl	800153c <setTimer>
			newTime = 0;
 80009e8:	4b79      	ldr	r3, [pc, #484]	; (8000bd0 <fsm_modify_run+0x23c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fbac 	bl	800014c <isButtonPressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d105      	bne.n	8000a06 <fsm_modify_run+0x72>
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff fbca 	bl	8000194 <isButtonLongPressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d010      	beq.n	8000a28 <fsm_modify_run+0x94>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0a:	4870      	ldr	r0, [pc, #448]	; (8000bcc <fsm_modify_run+0x238>)
 8000a0c:	f001 fe65 	bl	80026da <HAL_GPIO_TogglePin>
			newTime++;
 8000a10:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a6e      	ldr	r2, [pc, #440]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000a18:	6013      	str	r3, [r2, #0]
			if(newTime > 99){
 8000a1a:	4b6d      	ldr	r3, [pc, #436]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b63      	cmp	r3, #99	; 0x63
 8000a20:	dd02      	ble.n	8000a28 <fsm_modify_run+0x94>
				newTime = 0;
 8000a22:	4b6b      	ldr	r3, [pc, #428]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f7ff fb8f 	bl	800014c <isButtonPressed>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d106      	bne.n	8000a42 <fsm_modify_run+0xae>
 8000a34:	2002      	movs	r0, #2
 8000a36:	f7ff fbad 	bl	8000194 <isButtonLongPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80bb 	beq.w	8000bb8 <fsm_modify_run+0x224>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000a42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a46:	4861      	ldr	r0, [pc, #388]	; (8000bcc <fsm_modify_run+0x238>)
 8000a48:	f001 fe47 	bl	80026da <HAL_GPIO_TogglePin>
			TIME_FOR_RED = newTime;
 8000a4c:	4b60      	ldr	r3, [pc, #384]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a60      	ldr	r2, [pc, #384]	; (8000bd4 <fsm_modify_run+0x240>)
 8000a52:	6013      	str	r3, [r2, #0]
			newTime = 0;
 8000a54:	4b5e      	ldr	r3, [pc, #376]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
			status = MODIFY_GREEN;
 8000a5a:	4b5b      	ldr	r3, [pc, #364]	; (8000bc8 <fsm_modify_run+0x234>)
 8000a5c:	2217      	movs	r2, #23
 8000a5e:	601a      	str	r2, [r3, #0]
		break;
 8000a60:	e0aa      	b.n	8000bb8 <fsm_modify_run+0x224>
		modify_green_led();
 8000a62:	f001 f90d 	bl	8001c80 <modify_green_led>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fb70 	bl	800014c <isButtonPressed>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d105      	bne.n	8000a7e <fsm_modify_run+0xea>
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fb8e 	bl	8000194 <isButtonLongPressed>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00f      	beq.n	8000a9e <fsm_modify_run+0x10a>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a82:	4852      	ldr	r0, [pc, #328]	; (8000bcc <fsm_modify_run+0x238>)
 8000a84:	f001 fe29 	bl	80026da <HAL_GPIO_TogglePin>
			status = MODIFY_AMBER;
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <fsm_modify_run+0x234>)
 8000a8a:	2218      	movs	r2, #24
 8000a8c:	601a      	str	r2, [r3, #0]
			setTimer(3, 500); // timer for bliking led 2hz on mode modify
 8000a8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a92:	2003      	movs	r0, #3
 8000a94:	f000 fd52 	bl	800153c <setTimer>
			newTime = 0;
 8000a98:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff fb54 	bl	800014c <isButtonPressed>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d105      	bne.n	8000ab6 <fsm_modify_run+0x122>
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff fb72 	bl	8000194 <isButtonLongPressed>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d010      	beq.n	8000ad8 <fsm_modify_run+0x144>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aba:	4844      	ldr	r0, [pc, #272]	; (8000bcc <fsm_modify_run+0x238>)
 8000abc:	f001 fe0d 	bl	80026da <HAL_GPIO_TogglePin>
			newTime++;
 8000ac0:	4b43      	ldr	r3, [pc, #268]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a42      	ldr	r2, [pc, #264]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000ac8:	6013      	str	r3, [r2, #0]
			if(newTime > 99){
 8000aca:	4b41      	ldr	r3, [pc, #260]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b63      	cmp	r3, #99	; 0x63
 8000ad0:	dd02      	ble.n	8000ad8 <fsm_modify_run+0x144>
				newTime = 0;
 8000ad2:	4b3f      	ldr	r3, [pc, #252]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fb37 	bl	800014c <isButtonPressed>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d105      	bne.n	8000af0 <fsm_modify_run+0x15c>
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f7ff fb55 	bl	8000194 <isButtonLongPressed>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d065      	beq.n	8000bbc <fsm_modify_run+0x228>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af4:	4835      	ldr	r0, [pc, #212]	; (8000bcc <fsm_modify_run+0x238>)
 8000af6:	f001 fdf0 	bl	80026da <HAL_GPIO_TogglePin>
			TIME_FOR_GREEN = newTime;
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <fsm_modify_run+0x244>)
 8000b00:	6013      	str	r3, [r2, #0]
			newTime = 0;
 8000b02:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
			status = MODIFY_AMBER;
 8000b08:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <fsm_modify_run+0x234>)
 8000b0a:	2218      	movs	r2, #24
 8000b0c:	601a      	str	r2, [r3, #0]
		break;
 8000b0e:	e055      	b.n	8000bbc <fsm_modify_run+0x228>
		modify_amber_led();
 8000b10:	f001 f8fe 	bl	8001d10 <modify_amber_led>
		if(isButtonPressed(0) || isButtonLongPressed(0)){
 8000b14:	2000      	movs	r0, #0
 8000b16:	f7ff fb19 	bl	800014c <isButtonPressed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d105      	bne.n	8000b2c <fsm_modify_run+0x198>
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fb37 	bl	8000194 <isButtonLongPressed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00a      	beq.n	8000b42 <fsm_modify_run+0x1ae>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b30:	4826      	ldr	r0, [pc, #152]	; (8000bcc <fsm_modify_run+0x238>)
 8000b32:	f001 fdd2 	bl	80026da <HAL_GPIO_TogglePin>
			status = INIT;
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <fsm_modify_run+0x234>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
			newTime = 0;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1) || isButtonLongPressed(1)){
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff fb02 	bl	800014c <isButtonPressed>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d105      	bne.n	8000b5a <fsm_modify_run+0x1c6>
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fb20 	bl	8000194 <isButtonLongPressed>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d010      	beq.n	8000b7c <fsm_modify_run+0x1e8>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5e:	481b      	ldr	r0, [pc, #108]	; (8000bcc <fsm_modify_run+0x238>)
 8000b60:	f001 fdbb 	bl	80026da <HAL_GPIO_TogglePin>
			newTime++;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000b6c:	6013      	str	r3, [r2, #0]
			if(newTime > 99){
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b63      	cmp	r3, #99	; 0x63
 8000b74:	dd02      	ble.n	8000b7c <fsm_modify_run+0x1e8>
				newTime = 0;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2) || isButtonLongPressed(2)){
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f7ff fae5 	bl	800014c <isButtonPressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d105      	bne.n	8000b94 <fsm_modify_run+0x200>
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fb03 	bl	8000194 <isButtonLongPressed>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d015      	beq.n	8000bc0 <fsm_modify_run+0x22c>
			HAL_GPIO_TogglePin(SIGNAL_BUTTON_GPIO_Port, SIGNAL_BUTTON_Pin);
 8000b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <fsm_modify_run+0x238>)
 8000b9a:	f001 fd9e 	bl	80026da <HAL_GPIO_TogglePin>
			TIME_FOR_AMBER = newTime;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <fsm_modify_run+0x248>)
 8000ba4:	6013      	str	r3, [r2, #0]
			newTime = 0;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <fsm_modify_run+0x23c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
			status = INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <fsm_modify_run+0x234>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
		break;
 8000bb2:	e005      	b.n	8000bc0 <fsm_modify_run+0x22c>
		break;
 8000bb4:	bf00      	nop
 8000bb6:	e004      	b.n	8000bc2 <fsm_modify_run+0x22e>
		break;
 8000bb8:	bf00      	nop
 8000bba:	e002      	b.n	8000bc2 <fsm_modify_run+0x22e>
		break;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <fsm_modify_run+0x22e>
		break;
 8000bc0:	bf00      	nop
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000138 	.word	0x20000138
 8000bcc:	40011000 	.word	0x40011000
 8000bd0:	2000012c 	.word	0x2000012c
 8000bd4:	20000084 	.word	0x20000084
 8000bd8:	20000080 	.word	0x20000080
 8000bdc:	20000088 	.word	0x20000088

08000be0 <display_lcd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

char buffer[16] = {0};
void display_lcd(int time1, int time2){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	snprintf(buffer, sizeof(buffer), "%02d", time1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <display_lcd+0x48>)
 8000bee:	2110      	movs	r1, #16
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <display_lcd+0x4c>)
 8000bf2:	f005 f867 	bl	8005cc4 <sniprintf>
	lcd_goto_XY(0, 0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 f8bc 	bl	8000d76 <lcd_goto_XY>
	lcd_send_string(buffer);
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <display_lcd+0x4c>)
 8000c00:	f000 f8a4 	bl	8000d4c <lcd_send_string>
	snprintf(buffer, sizeof(buffer), "%02d", time2);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <display_lcd+0x48>)
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <display_lcd+0x4c>)
 8000c0c:	f005 f85a 	bl	8005cc4 <sniprintf>
	lcd_goto_XY(1, 0);
 8000c10:	2100      	movs	r1, #0
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 f8af 	bl	8000d76 <lcd_goto_XY>
	lcd_send_string(buffer);
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <display_lcd+0x4c>)
 8000c1a:	f000 f897 	bl	8000d4c <lcd_send_string>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08006578 	.word	0x08006578
 8000c2c:	20000114 	.word	0x20000114

08000c30 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f023 030f 	bic.w	r3, r3, #15
 8000c40:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	011b      	lsls	r3, r3, #4
 8000c46:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f043 030c 	orr.w	r3, r3, #12
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	f043 030c 	orr.w	r3, r3, #12
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c70:	f107 0208 	add.w	r2, r7, #8
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2304      	movs	r3, #4
 8000c7a:	2142      	movs	r1, #66	; 0x42
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <lcd_send_cmd+0x5c>)
 8000c7e:	f001 febf 	bl	8002a00 <HAL_I2C_Master_Transmit>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000013c 	.word	0x2000013c

08000c90 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f023 030f 	bic.w	r3, r3, #15
 8000ca0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	f043 030d 	orr.w	r3, r3, #13
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	f043 0309 	orr.w	r3, r3, #9
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	f043 030d 	orr.w	r3, r3, #13
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	f043 0309 	orr.w	r3, r3, #9
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cd0:	f107 0208 	add.w	r2, r7, #8
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2304      	movs	r3, #4
 8000cda:	2142      	movs	r1, #66	; 0x42
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <lcd_send_data+0x5c>)
 8000cde:	f001 fe8f 	bl	8002a00 <HAL_I2C_Master_Transmit>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000013c 	.word	0x2000013c

08000cf0 <lcd_init>:

void lcd_init (void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000cf4:	2033      	movs	r0, #51	; 0x33
 8000cf6:	f7ff ff9b 	bl	8000c30 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000cfa:	2032      	movs	r0, #50	; 0x32
 8000cfc:	f7ff ff98 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f001 f97f 	bl	8002004 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000d06:	2028      	movs	r0, #40	; 0x28
 8000d08:	f7ff ff92 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d0c:	2032      	movs	r0, #50	; 0x32
 8000d0e:	f001 f979 	bl	8002004 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff ff8c 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d18:	2032      	movs	r0, #50	; 0x32
 8000d1a:	f001 f973 	bl	8002004 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d1e:	2006      	movs	r0, #6
 8000d20:	f7ff ff86 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d24:	2032      	movs	r0, #50	; 0x32
 8000d26:	f001 f96d 	bl	8002004 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000d2a:	200c      	movs	r0, #12
 8000d2c:	f7ff ff80 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d30:	2032      	movs	r0, #50	; 0x32
 8000d32:	f001 f967 	bl	8002004 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff ff7a 	bl	8000c30 <lcd_send_cmd>
	HAL_Delay(50);
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f001 f961 	bl	8002004 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d42:	2080      	movs	r0, #128	; 0x80
 8000d44:	f7ff ff74 	bl	8000c30 <lcd_send_cmd>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d54:	e006      	b.n	8000d64 <lcd_send_string+0x18>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff96 	bl	8000c90 <lcd_send_data>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f4      	bne.n	8000d56 <lcd_send_string+0xa>
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d108      	bne.n	8000d98 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	337f      	adds	r3, #127	; 0x7f
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e008      	b.n	8000daa <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	3340      	adds	r3, #64	; 0x40
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff3f 	bl	8000c30 <lcd_send_cmd>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f001 f8be 	bl	8001f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 f836 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f000 f918 	bl	8000ffc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dcc:	f000 f8ec 	bl	8000fa8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dd0:	f000 f870 	bl	8000eb4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000dd4:	f000 f89c 	bl	8000f10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <main+0x60>)
 8000dda:	f004 fac1 	bl	8005360 <HAL_TIM_Base_Start_IT>
  status = INIT;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <main+0x64>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
  lcd_init();
 8000de4:	f7ff ff84 	bl	8000cf0 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SCH_Init();
 8000de8:	f000 f9c1 	bl	800116e <SCH_Init>
	SCH_Add_Task(getKeyInput, 0, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2100      	movs	r1, #0
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <main+0x68>)
 8000df2:	f000 f9d1 	bl	8001198 <SCH_Add_Task>
	SCH_Add_Task(fsm_automatic_run, 0, 1);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2100      	movs	r1, #0
 8000dfa:	480b      	ldr	r0, [pc, #44]	; (8000e28 <main+0x6c>)
 8000dfc:	f000 f9cc 	bl	8001198 <SCH_Add_Task>
	SCH_Add_Task(fsm_modify_run, 0, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2100      	movs	r1, #0
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <main+0x70>)
 8000e06:	f000 f9c7 	bl	8001198 <SCH_Add_Task>
	SCH_Add_Task(fsm_manual_run, 0, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4808      	ldr	r0, [pc, #32]	; (8000e30 <main+0x74>)
 8000e10:	f000 f9c2 	bl	8001198 <SCH_Add_Task>
  			//setTimer(8, 1000);
  	//}
//  	  fsm_automatic_run();
// 	  fsm_modify_run();
// 	  fsm_manual_run();
  	SCH_Dispatch_Tasks();
 8000e14:	f000 fa76 	bl	8001304 <SCH_Dispatch_Tasks>
 8000e18:	e7fc      	b.n	8000e14 <main+0x58>
 8000e1a:	bf00      	nop
 8000e1c:	20000190 	.word	0x20000190
 8000e20:	20000138 	.word	0x20000138
 8000e24:	080001dd 	.word	0x080001dd
 8000e28:	080003e9 	.word	0x080003e9
 8000e2c:	08000995 	.word	0x08000995
 8000e30:	08000881 	.word	0x08000881

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b090      	sub	sp, #64	; 0x40
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	2228      	movs	r2, #40	; 0x28
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f004 ff36 	bl	8005cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fe16 	bl	8004aa4 <HAL_RCC_OscConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000e7e:	f000 f971 	bl	8001164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	230f      	movs	r3, #15
 8000e84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 f881 	bl	8004fa4 <HAL_RCC_ClockConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ea8:	f000 f95c 	bl	8001164 <Error_Handler>
  }
}
 8000eac:	bf00      	nop
 8000eae:	3740      	adds	r7, #64	; 0x40
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <MX_I2C1_Init+0x54>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ec0:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <MX_I2C1_Init+0x58>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ef2:	f001 fc2d 	bl	8002750 <HAL_I2C_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000efc:	f000 f932 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000013c 	.word	0x2000013c
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	000186a0 	.word	0x000186a0

08000f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f44:	2209      	movs	r2, #9
 8000f46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f56:	f004 f9b3 	bl	80052c0 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f60:	f000 f900 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f72:	f004 fb37 	bl	80055e4 <HAL_TIM_ConfigClockSource>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f7c:	f000 f8f2 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f8e:	f004 fd19 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 f8e4 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000190 	.word	0x20000190

08000fa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_USART2_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	f004 fd60 	bl	8005aa4 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f000 f8bb 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001d8 	.word	0x200001d8
 8000ff8:	40004400 	.word	0x40004400

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001010:	4b49      	ldr	r3, [pc, #292]	; (8001138 <MX_GPIO_Init+0x13c>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a48      	ldr	r2, [pc, #288]	; (8001138 <MX_GPIO_Init+0x13c>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b46      	ldr	r3, [pc, #280]	; (8001138 <MX_GPIO_Init+0x13c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <MX_GPIO_Init+0x13c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a42      	ldr	r2, [pc, #264]	; (8001138 <MX_GPIO_Init+0x13c>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b40      	ldr	r3, [pc, #256]	; (8001138 <MX_GPIO_Init+0x13c>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <MX_GPIO_Init+0x13c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a3c      	ldr	r2, [pc, #240]	; (8001138 <MX_GPIO_Init+0x13c>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <MX_GPIO_Init+0x13c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <MX_GPIO_Init+0x13c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a36      	ldr	r2, [pc, #216]	; (8001138 <MX_GPIO_Init+0x13c>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <MX_GPIO_Init+0x13c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_B_Pin|LED2_A_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001076:	4831      	ldr	r0, [pc, #196]	; (800113c <MX_GPIO_Init+0x140>)
 8001078:	f001 fb17 	bl	80026aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED0_B_Pin|LED1_B_Pin|LED0_A_Pin
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001082:	482f      	ldr	r0, [pc, #188]	; (8001140 <MX_GPIO_Init+0x144>)
 8001084:	f001 fb11 	bl	80026aa <HAL_GPIO_WritePin>
                          |LED3_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_B_Pin|SIGNAL_BUTTON_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800108e:	482d      	ldr	r0, [pc, #180]	; (8001144 <MX_GPIO_Init+0x148>)
 8001090:	f001 fb0b 	bl	80026aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109a:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_GPIO_Init+0x14c>)
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	4826      	ldr	r0, [pc, #152]	; (8001144 <MX_GPIO_Init+0x148>)
 80010aa:	f001 f963 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80010ae:	2313      	movs	r3, #19
 80010b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	481e      	ldr	r0, [pc, #120]	; (800113c <MX_GPIO_Init+0x140>)
 80010c2:	f001 f957 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED2_B_Pin LED2_A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_B_Pin|LED2_A_Pin;
 80010c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4817      	ldr	r0, [pc, #92]	; (800113c <MX_GPIO_Init+0x140>)
 80010e0:	f001 f948 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_A_Pin LED0_B_Pin LED1_B_Pin LED0_A_Pin
                           LED3_A_Pin */
  GPIO_InitStruct.Pin = LED1_A_Pin|LED0_B_Pin|LED1_B_Pin|LED0_A_Pin
 80010e4:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80010e8:	613b      	str	r3, [r7, #16]
                          |LED3_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <MX_GPIO_Init+0x144>)
 80010fe:	f001 f939 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_B_Pin SIGNAL_BUTTON_Pin */
  GPIO_InitStruct.Pin = LED3_B_Pin|SIGNAL_BUTTON_Pin;
 8001102:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2302      	movs	r3, #2
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <MX_GPIO_Init+0x148>)
 800111c:	f001 f92a 	bl	8002374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2028      	movs	r0, #40	; 0x28
 8001126:	f001 f868 	bl	80021fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800112a:	2028      	movs	r0, #40	; 0x28
 800112c:	f001 f881 	bl	8002232 <HAL_NVIC_EnableIRQ>

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800
 8001140:	40010c00 	.word	0x40010c00
 8001144:	40011000 	.word	0x40011000
 8001148:	10110000 	.word	0x10110000

0800114c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	timerRun();
 8001154:	f000 fa16 	bl	8001584 <timerRun>
//	getKeyInput();
	SCH_Update();
 8001158:	f000 f874 	bl	8001244 <SCH_Update>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>

0800116e <SCH_Init>:
#include "scheduler.h"
#include <stdlib.h>
sTasks SCH_task_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	e006      	b.n	8001188 <SCH_Init+0x1a>
		SCH_Delete_Tasks(i);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f911 	bl	80013a4 <SCH_Delete_Tasks>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	3301      	adds	r3, #1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b27      	cmp	r3, #39	; 0x27
 800118c:	d9f5      	bls.n	800117a <SCH_Init+0xc>
	}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <SCH_Add_Task>:
void SCH_Add_Task(void (*pFuntion)(), uint32_t DELAY, uint32_t PERIOD){
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <SCH_Add_Task+0xa4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b27      	cmp	r3, #39	; 0x27
 80011aa:	d842      	bhi.n	8001232 <SCH_Add_Task+0x9a>
		SCH_task_G[current_index_task].pTask = pFuntion;
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <SCH_Add_Task+0xa4>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <SCH_Add_Task+0xa8>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]
		SCH_task_G[current_index_task].Delay = DELAY;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <SCH_Add_Task+0xa4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <SCH_Add_Task+0xa8>)
 80011ca:	460b      	mov	r3, r1
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3304      	adds	r3, #4
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	601a      	str	r2, [r3, #0]
		SCH_task_G[current_index_task].Period = PERIOD;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <SCH_Add_Task+0xa4>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4a17      	ldr	r2, [pc, #92]	; (8001240 <SCH_Add_Task+0xa8>)
 80011e2:	460b      	mov	r3, r1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3308      	adds	r3, #8
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
		SCH_task_G[current_index_task].RunMe = 0;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <SCH_Add_Task+0xa4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <SCH_Add_Task+0xa8>)
 80011fa:	460b      	mov	r3, r1
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	330c      	adds	r3, #12
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		SCH_task_G[current_index_task].TaskID = current_index_task;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <SCH_Add_Task+0xa4>)
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <SCH_Add_Task+0xa4>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SCH_Add_Task+0xa8>)
 8001218:	460b      	mov	r3, r1
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3310      	adds	r3, #16
 8001224:	6018      	str	r0, [r3, #0]
		current_index_task++;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <SCH_Add_Task+0xa4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b03      	ldr	r3, [pc, #12]	; (800123c <SCH_Add_Task+0xa4>)
 8001230:	701a      	strb	r2, [r3, #0]
	}
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000124 	.word	0x20000124
 8001240:	20000220 	.word	0x20000220

08001244 <SCH_Update>:
void SCH_Update(void){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	e048      	b.n	80012e2 <SCH_Update+0x9e>
		if(SCH_task_G[i].Delay > 0){
 8001250:	492a      	ldr	r1, [pc, #168]	; (80012fc <SCH_Update+0xb8>)
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	3304      	adds	r3, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d013      	beq.n	800128e <SCH_Update+0x4a>
			SCH_task_G[i].Delay--;
 8001266:	4925      	ldr	r1, [pc, #148]	; (80012fc <SCH_Update+0xb8>)
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	3304      	adds	r3, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1e59      	subs	r1, r3, #1
 800127a:	4820      	ldr	r0, [pc, #128]	; (80012fc <SCH_Update+0xb8>)
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4403      	add	r3, r0
 8001288:	3304      	adds	r3, #4
 800128a:	6019      	str	r1, [r3, #0]
 800128c:	e026      	b.n	80012dc <SCH_Update+0x98>
		}
		else {
			SCH_task_G[i].Delay = SCH_task_G[i].Period;
 800128e:	491b      	ldr	r1, [pc, #108]	; (80012fc <SCH_Update+0xb8>)
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3308      	adds	r3, #8
 800129e:	6819      	ldr	r1, [r3, #0]
 80012a0:	4816      	ldr	r0, [pc, #88]	; (80012fc <SCH_Update+0xb8>)
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4403      	add	r3, r0
 80012ae:	3304      	adds	r3, #4
 80012b0:	6019      	str	r1, [r3, #0]
			SCH_task_G[i].RunMe += 1;
 80012b2:	4912      	ldr	r1, [pc, #72]	; (80012fc <SCH_Update+0xb8>)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	330c      	adds	r3, #12
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2d8      	uxtb	r0, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <SCH_Update+0xb8>)
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	330c      	adds	r3, #12
 80012d8:	4602      	mov	r2, r0
 80012da:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3301      	adds	r3, #1
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <SCH_Update+0xbc>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	dbb0      	blt.n	8001250 <SCH_Update+0xc>
		}
	}
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000220 	.word	0x20000220
 8001300:	20000124 	.word	0x20000124

08001304 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
	for(int i=0; i < current_index_task; i++){
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	e03a      	b.n	8001386 <SCH_Dispatch_Tasks+0x82>
		if(SCH_task_G[i].RunMe > 0){
 8001310:	4922      	ldr	r1, [pc, #136]	; (800139c <SCH_Dispatch_Tasks+0x98>)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	330c      	adds	r3, #12
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d02c      	beq.n	8001380 <SCH_Dispatch_Tasks+0x7c>
			SCH_task_G[i].RunMe--;
 8001326:	491d      	ldr	r1, [pc, #116]	; (800139c <SCH_Dispatch_Tasks+0x98>)
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	330c      	adds	r3, #12
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	b2d8      	uxtb	r0, r3
 800133c:	4917      	ldr	r1, [pc, #92]	; (800139c <SCH_Dispatch_Tasks+0x98>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	330c      	adds	r3, #12
 800134c:	4602      	mov	r2, r0
 800134e:	701a      	strb	r2, [r3, #0]
			(*SCH_task_G[i].pTask)();
 8001350:	4912      	ldr	r1, [pc, #72]	; (800139c <SCH_Dispatch_Tasks+0x98>)
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4798      	blx	r3
			if(SCH_task_G[i].Period == 0){
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <SCH_Dispatch_Tasks+0x98>)
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d103      	bne.n	8001380 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete_Tasks(i);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f812 	bl	80013a4 <SCH_Delete_Tasks>
	for(int i=0; i < current_index_task; i++){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SCH_Dispatch_Tasks+0x9c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4293      	cmp	r3, r2
 8001390:	dbbe      	blt.n	8001310 <SCH_Dispatch_Tasks+0xc>
			}
		}

	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000220 	.word	0x20000220
 80013a0:	20000124 	.word	0x20000124

080013a4 <SCH_Delete_Tasks>:
uint8_t SCH_Delete_Tasks(uint32_t taskID){
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if(current_index_task == 0){
 80013ac:	4b61      	ldr	r3, [pc, #388]	; (8001534 <SCH_Delete_Tasks+0x190>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <SCH_Delete_Tasks+0x14>
		return -1;
 80013b4:	23ff      	movs	r3, #255	; 0xff
 80013b6:	e0b8      	b.n	800152a <SCH_Delete_Tasks+0x186>
	}
	if(taskID > current_index_task - 1 || taskID < 0){
 80013b8:	4b5e      	ldr	r3, [pc, #376]	; (8001534 <SCH_Delete_Tasks+0x190>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	461a      	mov	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <SCH_Delete_Tasks+0x26>
		return -1;
 80013c6:	23ff      	movs	r3, #255	; 0xff
 80013c8:	e0af      	b.n	800152a <SCH_Delete_Tasks+0x186>
	}
	if(current_index_task > 1){
 80013ca:	4b5a      	ldr	r3, [pc, #360]	; (8001534 <SCH_Delete_Tasks+0x190>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d969      	bls.n	80014a6 <SCH_Delete_Tasks+0x102>
	for(int i=taskID; i < current_index_task - 1; i++){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e060      	b.n	800149a <SCH_Delete_Tasks+0xf6>
		SCH_task_G[i].pTask = SCH_task_G[i+1].pTask;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	4956      	ldr	r1, [pc, #344]	; (8001538 <SCH_Delete_Tasks+0x194>)
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	6819      	ldr	r1, [r3, #0]
 80013ea:	4853      	ldr	r0, [pc, #332]	; (8001538 <SCH_Delete_Tasks+0x194>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4403      	add	r3, r0
 80013f8:	6019      	str	r1, [r3, #0]
		SCH_task_G[i].Delay = SCH_task_G[i+1].Delay;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	494e      	ldr	r1, [pc, #312]	; (8001538 <SCH_Delete_Tasks+0x194>)
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	3304      	adds	r3, #4
 800140c:	6819      	ldr	r1, [r3, #0]
 800140e:	484a      	ldr	r0, [pc, #296]	; (8001538 <SCH_Delete_Tasks+0x194>)
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4403      	add	r3, r0
 800141c:	3304      	adds	r3, #4
 800141e:	6019      	str	r1, [r3, #0]
		SCH_task_G[i].Period = SCH_task_G[i+1].Period;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	4944      	ldr	r1, [pc, #272]	; (8001538 <SCH_Delete_Tasks+0x194>)
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3308      	adds	r3, #8
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	4840      	ldr	r0, [pc, #256]	; (8001538 <SCH_Delete_Tasks+0x194>)
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4403      	add	r3, r0
 8001442:	3308      	adds	r3, #8
 8001444:	6019      	str	r1, [r3, #0]
		SCH_task_G[i].RunMe = SCH_task_G[i+1].RunMe;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	493b      	ldr	r1, [pc, #236]	; (8001538 <SCH_Delete_Tasks+0x194>)
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	330c      	adds	r3, #12
 8001458:	7818      	ldrb	r0, [r3, #0]
 800145a:	4937      	ldr	r1, [pc, #220]	; (8001538 <SCH_Delete_Tasks+0x194>)
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	330c      	adds	r3, #12
 800146a:	4602      	mov	r2, r0
 800146c:	701a      	strb	r2, [r3, #0]
		SCH_task_G[i].TaskID = SCH_task_G[i+1].TaskID;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	4931      	ldr	r1, [pc, #196]	; (8001538 <SCH_Delete_Tasks+0x194>)
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	3310      	adds	r3, #16
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	482d      	ldr	r0, [pc, #180]	; (8001538 <SCH_Delete_Tasks+0x194>)
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4403      	add	r3, r0
 8001490:	3310      	adds	r3, #16
 8001492:	6019      	str	r1, [r3, #0]
	for(int i=taskID; i < current_index_task - 1; i++){
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <SCH_Delete_Tasks+0x190>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	db98      	blt.n	80013d8 <SCH_Delete_Tasks+0x34>
		}
	}
    SCH_task_G[current_index_task - 1].pTask = NULL;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <SCH_Delete_Tasks+0x190>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	1e5a      	subs	r2, r3, #1
 80014ac:	4922      	ldr	r1, [pc, #136]	; (8001538 <SCH_Delete_Tasks+0x194>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
    SCH_task_G[current_index_task - 1].Delay = 0;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <SCH_Delete_Tasks+0x190>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	491d      	ldr	r1, [pc, #116]	; (8001538 <SCH_Delete_Tasks+0x194>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	3304      	adds	r3, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
    SCH_task_G[current_index_task - 1].Period = 0;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <SCH_Delete_Tasks+0x190>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	4917      	ldr	r1, [pc, #92]	; (8001538 <SCH_Delete_Tasks+0x194>)
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3308      	adds	r3, #8
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    SCH_task_G[current_index_task - 1].RunMe = 0;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <SCH_Delete_Tasks+0x190>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	4911      	ldr	r1, [pc, #68]	; (8001538 <SCH_Delete_Tasks+0x194>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	330c      	adds	r3, #12
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    SCH_task_G[current_index_task - 1].TaskID = 0;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <SCH_Delete_Tasks+0x190>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	490b      	ldr	r1, [pc, #44]	; (8001538 <SCH_Delete_Tasks+0x194>)
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3310      	adds	r3, #16
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
	current_index_task--;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SCH_Delete_Tasks+0x190>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <SCH_Delete_Tasks+0x190>)
 8001526:	701a      	strb	r2, [r3, #0]
	return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	20000124 	.word	0x20000124
 8001538:	20000220 	.word	0x20000220

0800153c <setTimer>:

#define NUM_TIMERS 10 // Define the number of timers
Timer timers[NUM_TIMERS];
int timer_cycle = 10;

void setTimer(int index, int duration) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
    if (index >= 0 && index < NUM_TIMERS) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db11      	blt.n	8001570 <setTimer+0x34>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b09      	cmp	r3, #9
 8001550:	dc0e      	bgt.n	8001570 <setTimer+0x34>
        timers[index].counter = duration / timer_cycle;
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <setTimer+0x40>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	fb92 f2f3 	sdiv	r2, r2, r3
 800155c:	4908      	ldr	r1, [pc, #32]	; (8001580 <setTimer+0x44>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        timers[index].flag = 0;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <setTimer+0x44>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
    }
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000078 	.word	0x20000078
 8001580:	20000540 	.word	0x20000540

08001584 <timerRun>:

void timerRun() {
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_TIMERS; i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	e01d      	b.n	80015cc <timerRun+0x48>
        if (timers[i].counter > 0) {
 8001590:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <timerRun+0x5c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dd14      	ble.n	80015c6 <timerRun+0x42>
            timers[i].counter--;
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <timerRun+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80015a4:	1e5a      	subs	r2, r3, #1
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <timerRun+0x5c>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            if (timers[i].counter <= 0) {
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <timerRun+0x5c>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dc05      	bgt.n	80015c6 <timerRun+0x42>
                timers[i].flag = 1;
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <timerRun+0x5c>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	2201      	movs	r2, #1
 80015c4:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < NUM_TIMERS; i++) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3301      	adds	r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b09      	cmp	r3, #9
 80015d0:	ddde      	ble.n	8001590 <timerRun+0xc>
            }
        }
    }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000540 	.word	0x20000540

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_MspInit+0x5c>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_MspInit+0x5c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6193      	str	r3, [r2, #24]
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_MspInit+0x5c>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_MspInit+0x5c>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_MspInit+0x5c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_MspInit+0x5c>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_MspInit+0x60>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_MspInit+0x60>)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000

08001648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <HAL_I2C_MspInit+0xb0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d142      	bne.n	80016ee <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_I2C_MspInit+0xb4>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_I2C_MspInit+0xb4>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_I2C_MspInit+0xb4>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001680:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001686:	2312      	movs	r3, #18
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	481a      	ldr	r0, [pc, #104]	; (8001700 <HAL_I2C_MspInit+0xb8>)
 8001696:	f000 fe6d 	bl	8002374 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_I2C_MspInit+0xbc>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_I2C_MspInit+0xbc>)
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_I2C_MspInit+0xb4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_I2C_MspInit+0xb4>)
 80016bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_I2C_MspInit+0xb4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	201f      	movs	r0, #31
 80016d4:	f000 fd91 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016d8:	201f      	movs	r0, #31
 80016da:	f000 fdaa 	bl	8002232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2020      	movs	r0, #32
 80016e4:	f000 fd89 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016e8:	2020      	movs	r0, #32
 80016ea:	f000 fda2 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40005400 	.word	0x40005400
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40010000 	.word	0x40010000

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d113      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_TIM_Base_MspInit+0x44>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <HAL_TIM_Base_MspInit+0x44>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_TIM_Base_MspInit+0x44>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	201c      	movs	r0, #28
 8001738:	f000 fd5f 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800173c:	201c      	movs	r0, #28
 800173e:	f000 fd78 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <HAL_UART_MspInit+0x70>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d123      	bne.n	80017b8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_UART_MspInit+0x74>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_UART_MspInit+0x74>)
 8001776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177a:	61d3      	str	r3, [r2, #28]
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_UART_MspInit+0x74>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_UART_MspInit+0x74>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <HAL_UART_MspInit+0x74>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_UART_MspInit+0x74>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017a0:	230c      	movs	r3, #12
 80017a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <HAL_UART_MspInit+0x78>)
 80017b4:	f000 fdde 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40004400 	.word	0x40004400
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010800 	.word	0x40010800

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f000 fbdb 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <TIM2_IRQHandler+0x10>)
 8001822:	f003 fdef 	bl	8005404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000190 	.word	0x20000190

08001830 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <I2C1_EV_IRQHandler+0x10>)
 8001836:	f001 f9e1 	bl	8002bfc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000013c 	.word	0x2000013c

08001844 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <I2C1_ER_IRQHandler+0x10>)
 800184a:	f001 fb48 	bl	8002ede <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000013c 	.word	0x2000013c

08001858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800185c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001860:	f000 ff54 	bl	800270c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f004 f9e2 	bl	8005c60 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20005000 	.word	0x20005000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	20000128 	.word	0x20000128
 80018d0:	200005b0 	.word	0x200005b0

080018d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <init>:
//		bufferB[0] = num / 10;
//		bufferB[1] = num % 10;
//	}
//}

void init(){
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	// HAL_GPIO_TogglePin(GPIOA, SIGNAL_Pin);
	if(TIME_FOR_GREEN < TIME_FOR_RED){
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <init+0x4c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <init+0x50>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	da10      	bge.n	8001912 <init+0x32>
		 time_red = TIME_FOR_RED;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <init+0x50>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <init+0x54>)
 80018f6:	6013      	str	r3, [r2, #0]
		 time_green = TIME_FOR_GREEN;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <init+0x4c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <init+0x58>)
 80018fe:	6013      	str	r3, [r2, #0]
		 time_amber = TIME_FOR_RED - TIME_FOR_GREEN - 1;
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <init+0x50>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <init+0x4c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	4a0b      	ldr	r2, [pc, #44]	; (800193c <init+0x5c>)
 800190e:	6013      	str	r3, [r2, #0]
	else {
	 time_red = 5;
	 time_green = 3;
	 time_amber = 2;
	}
}
 8001910:	e008      	b.n	8001924 <init+0x44>
	 time_red = 5;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <init+0x54>)
 8001914:	2205      	movs	r2, #5
 8001916:	601a      	str	r2, [r3, #0]
	 time_green = 3;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <init+0x58>)
 800191a:	2203      	movs	r2, #3
 800191c:	601a      	str	r2, [r3, #0]
	 time_amber = 2;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <init+0x5c>)
 8001920:	2202      	movs	r2, #2
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000080 	.word	0x20000080
 8001930:	20000084 	.word	0x20000084
 8001934:	20000594 	.word	0x20000594
 8001938:	20000590 	.word	0x20000590
 800193c:	20000598 	.word	0x20000598

08001940 <auto_green_red>:
void auto_green_red(){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2120      	movs	r1, #32
 8001948:	4822      	ldr	r0, [pc, #136]	; (80019d4 <auto_green_red+0x94>)
 800194a:	f000 feae 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2108      	movs	r1, #8
 8001952:	4820      	ldr	r0, [pc, #128]	; (80019d4 <auto_green_red+0x94>)
 8001954:	f000 fea9 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195e:	481e      	ldr	r0, [pc, #120]	; (80019d8 <auto_green_red+0x98>)
 8001960:	f000 fea3 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196a:	481b      	ldr	r0, [pc, #108]	; (80019d8 <auto_green_red+0x98>)
 800196c:	f000 fe9d 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001976:	4817      	ldr	r0, [pc, #92]	; (80019d4 <auto_green_red+0x94>)
 8001978:	f000 fe97 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2110      	movs	r1, #16
 8001980:	4814      	ldr	r0, [pc, #80]	; (80019d4 <auto_green_red+0x94>)
 8001982:	f000 fe92 	bl	80026aa <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8001986:	2201      	movs	r2, #1
 8001988:	2140      	movs	r1, #64	; 0x40
 800198a:	4812      	ldr	r0, [pc, #72]	; (80019d4 <auto_green_red+0x94>)
 800198c:	f000 fe8d 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001990:	2201      	movs	r2, #1
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	4811      	ldr	r0, [pc, #68]	; (80019dc <auto_green_red+0x9c>)
 8001996:	f000 fe88 	bl	80026aa <HAL_GPIO_WritePin>

//	update_led_buffer_A(time_green);
//	update_led_buffer_B(time_red);
	display_lcd(time_green, time_red);
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <auto_green_red+0xa0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <auto_green_red+0xa4>)
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f91b 	bl	8000be0 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <auto_green_red+0xa8>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10e      	bne.n	80019d0 <auto_green_red+0x90>
		{
			time_green--;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <auto_green_red+0xa0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <auto_green_red+0xa0>)
 80019ba:	6013      	str	r3, [r2, #0]
			time_red--;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <auto_green_red+0xa4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <auto_green_red+0xa4>)
 80019c4:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 80019c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7ff fdb6 	bl	800153c <setTimer>
		}
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	40010800 	.word	0x40010800
 80019dc:	40011000 	.word	0x40011000
 80019e0:	20000590 	.word	0x20000590
 80019e4:	20000594 	.word	0x20000594
 80019e8:	20000540 	.word	0x20000540

080019ec <auto_amber_red>:
void auto_amber_red(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2120      	movs	r1, #32
 80019f4:	4822      	ldr	r0, [pc, #136]	; (8001a80 <auto_amber_red+0x94>)
 80019f6:	f000 fe58 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2108      	movs	r1, #8
 80019fe:	4820      	ldr	r0, [pc, #128]	; (8001a80 <auto_amber_red+0x94>)
 8001a00:	f000 fe53 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a0a:	481e      	ldr	r0, [pc, #120]	; (8001a84 <auto_amber_red+0x98>)
 8001a0c:	f000 fe4d 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a16:	481b      	ldr	r0, [pc, #108]	; (8001a84 <auto_amber_red+0x98>)
 8001a18:	f000 fe47 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a22:	4817      	ldr	r0, [pc, #92]	; (8001a80 <auto_amber_red+0x94>)
 8001a24:	f000 fe41 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	4814      	ldr	r0, [pc, #80]	; (8001a80 <auto_amber_red+0x94>)
 8001a2e:	f000 fe3c 	bl	80026aa <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	2140      	movs	r1, #64	; 0x40
 8001a36:	4812      	ldr	r0, [pc, #72]	; (8001a80 <auto_amber_red+0x94>)
 8001a38:	f000 fe37 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	4811      	ldr	r0, [pc, #68]	; (8001a88 <auto_amber_red+0x9c>)
 8001a42:	f000 fe32 	bl	80026aa <HAL_GPIO_WritePin>

//	update_led_buffer_A(time_amber);
//	update_led_buffer_B(time_red);
//	display();
	display_lcd(time_amber, time_red);
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <auto_amber_red+0xa0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <auto_amber_red+0xa4>)
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f8c5 	bl	8000be0 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <auto_amber_red+0xa8>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10e      	bne.n	8001a7c <auto_amber_red+0x90>
		{
			time_amber--;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <auto_amber_red+0xa0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <auto_amber_red+0xa0>)
 8001a66:	6013      	str	r3, [r2, #0]
			time_red--;
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <auto_amber_red+0xa4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <auto_amber_red+0xa4>)
 8001a70:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8001a72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff fd60 	bl	800153c <setTimer>
		}
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40010800 	.word	0x40010800
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	20000598 	.word	0x20000598
 8001a90:	20000594 	.word	0x20000594
 8001a94:	20000540 	.word	0x20000540

08001a98 <auto_red_green>:
void auto_red_green(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4822      	ldr	r0, [pc, #136]	; (8001b2c <auto_red_green+0x94>)
 8001aa2:	f000 fe02 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2108      	movs	r1, #8
 8001aaa:	4820      	ldr	r0, [pc, #128]	; (8001b2c <auto_red_green+0x94>)
 8001aac:	f000 fdfd 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab6:	481e      	ldr	r0, [pc, #120]	; (8001b30 <auto_red_green+0x98>)
 8001ab8:	f000 fdf7 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac2:	481b      	ldr	r0, [pc, #108]	; (8001b30 <auto_red_green+0x98>)
 8001ac4:	f000 fdf1 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ace:	4817      	ldr	r0, [pc, #92]	; (8001b2c <auto_red_green+0x94>)
 8001ad0:	f000 fdeb 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	4814      	ldr	r0, [pc, #80]	; (8001b2c <auto_red_green+0x94>)
 8001ada:	f000 fde6 	bl	80026aa <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2140      	movs	r1, #64	; 0x40
 8001ae2:	4812      	ldr	r0, [pc, #72]	; (8001b2c <auto_red_green+0x94>)
 8001ae4:	f000 fde1 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	4811      	ldr	r0, [pc, #68]	; (8001b34 <auto_red_green+0x9c>)
 8001aee:	f000 fddc 	bl	80026aa <HAL_GPIO_WritePin>

//	update_led_buffer_A(time_red);
//	update_led_buffer_B(time_green);
//	display();
	display_lcd(time_red, time_green);
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <auto_red_green+0xa0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <auto_red_green+0xa4>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f86f 	bl	8000be0 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <auto_red_green+0xa8>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10e      	bne.n	8001b28 <auto_red_green+0x90>
		{
			time_red--;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <auto_red_green+0xa0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <auto_red_green+0xa0>)
 8001b12:	6013      	str	r3, [r2, #0]
			time_green--;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <auto_red_green+0xa4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <auto_red_green+0xa4>)
 8001b1c:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8001b1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fd0a 	bl	800153c <setTimer>
		}
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40010800 	.word	0x40010800
 8001b34:	40011000 	.word	0x40011000
 8001b38:	20000594 	.word	0x20000594
 8001b3c:	20000590 	.word	0x20000590
 8001b40:	20000540 	.word	0x20000540

08001b44 <auto_red_amber>:
void auto_red_amber(){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	4822      	ldr	r0, [pc, #136]	; (8001bd8 <auto_red_amber+0x94>)
 8001b4e:	f000 fdac 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2108      	movs	r1, #8
 8001b56:	4820      	ldr	r0, [pc, #128]	; (8001bd8 <auto_red_amber+0x94>)
 8001b58:	f000 fda7 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b62:	481e      	ldr	r0, [pc, #120]	; (8001bdc <auto_red_amber+0x98>)
 8001b64:	f000 fda1 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6e:	481b      	ldr	r0, [pc, #108]	; (8001bdc <auto_red_amber+0x98>)
 8001b70:	f000 fd9b 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7a:	4817      	ldr	r0, [pc, #92]	; (8001bd8 <auto_red_amber+0x94>)
 8001b7c:	f000 fd95 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2110      	movs	r1, #16
 8001b84:	4814      	ldr	r0, [pc, #80]	; (8001bd8 <auto_red_amber+0x94>)
 8001b86:	f000 fd90 	bl	80026aa <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2140      	movs	r1, #64	; 0x40
 8001b8e:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <auto_red_amber+0x94>)
 8001b90:	f000 fd8b 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	4811      	ldr	r0, [pc, #68]	; (8001be0 <auto_red_amber+0x9c>)
 8001b9a:	f000 fd86 	bl	80026aa <HAL_GPIO_WritePin>

//	update_led_buffer_A(time_red);
//	update_led_buffer_B(time_amber);
//	display();
	display_lcd(time_red, time_amber);
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <auto_red_amber+0xa0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <auto_red_amber+0xa4>)
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f819 	bl	8000be0 <display_lcd>
	if(timers[1].flag == 1) // flag for display 7
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <auto_red_amber+0xa8>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10e      	bne.n	8001bd4 <auto_red_amber+0x90>
		{
			time_red--;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <auto_red_amber+0xa0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <auto_red_amber+0xa0>)
 8001bbe:	6013      	str	r3, [r2, #0]
			time_amber--;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <auto_red_amber+0xa4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <auto_red_amber+0xa4>)
 8001bc8:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8001bca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fcb4 	bl	800153c <setTimer>
		}
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40010c00 	.word	0x40010c00
 8001bdc:	40010800 	.word	0x40010800
 8001be0:	40011000 	.word	0x40011000
 8001be4:	20000594 	.word	0x20000594
 8001be8:	20000598 	.word	0x20000598
 8001bec:	20000540 	.word	0x20000540

08001bf0 <modify_red_led>:

// use timer 3
void modify_red_led(){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

	if(timers[3].flag == 1){
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <modify_red_led+0x7c>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d12f      	bne.n	8001c5c <modify_red_led+0x6c>

		HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2120      	movs	r1, #32
 8001c00:	481b      	ldr	r0, [pc, #108]	; (8001c70 <modify_red_led+0x80>)
 8001c02:	f000 fd52 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	2108      	movs	r1, #8
 8001c0a:	4819      	ldr	r0, [pc, #100]	; (8001c70 <modify_red_led+0x80>)
 8001c0c:	f000 fd4d 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c16:	4816      	ldr	r0, [pc, #88]	; (8001c70 <modify_red_led+0x80>)
 8001c18:	f000 fd47 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2110      	movs	r1, #16
 8001c20:	4813      	ldr	r0, [pc, #76]	; (8001c70 <modify_red_led+0x80>)
 8001c22:	f000 fd42 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c2c:	4811      	ldr	r0, [pc, #68]	; (8001c74 <modify_red_led+0x84>)
 8001c2e:	f000 fd3c 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c38:	480e      	ldr	r0, [pc, #56]	; (8001c74 <modify_red_led+0x84>)
 8001c3a:	f000 fd36 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2140      	movs	r1, #64	; 0x40
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <modify_red_led+0x80>)
 8001c44:	f000 fd31 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	480a      	ldr	r0, [pc, #40]	; (8001c78 <modify_red_led+0x88>)
 8001c4e:	f000 fd2c 	bl	80026aa <HAL_GPIO_WritePin>
		setTimer(3, 500);
 8001c52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c56:	2003      	movs	r0, #3
 8001c58:	f7ff fc70 	bl	800153c <setTimer>
	}
//	update_led_buffer_B(2); // mode name
//	update_led_buffer_A(newTime); //new time
//	display();
	display_lcd(2, newTime);
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <modify_red_led+0x8c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	2002      	movs	r0, #2
 8001c64:	f7fe ffbc 	bl	8000be0 <display_lcd>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000540 	.word	0x20000540
 8001c70:	40010c00 	.word	0x40010c00
 8001c74:	40010800 	.word	0x40010800
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	2000012c 	.word	0x2000012c

08001c80 <modify_green_led>:
void modify_green_led(){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	if(timers[3].flag == 1){
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <modify_green_led+0x7c>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d12f      	bne.n	8001cec <modify_green_led+0x6c>

		HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2120      	movs	r1, #32
 8001c90:	481b      	ldr	r0, [pc, #108]	; (8001d00 <modify_green_led+0x80>)
 8001c92:	f000 fd0a 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8001c96:	2201      	movs	r2, #1
 8001c98:	2108      	movs	r1, #8
 8001c9a:	4819      	ldr	r0, [pc, #100]	; (8001d00 <modify_green_led+0x80>)
 8001c9c:	f000 fd05 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca6:	4816      	ldr	r0, [pc, #88]	; (8001d00 <modify_green_led+0x80>)
 8001ca8:	f000 fcff 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4813      	ldr	r0, [pc, #76]	; (8001d00 <modify_green_led+0x80>)
 8001cb2:	f000 fcfa 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cbc:	4811      	ldr	r0, [pc, #68]	; (8001d04 <modify_green_led+0x84>)
 8001cbe:	f000 fcf4 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc8:	480e      	ldr	r0, [pc, #56]	; (8001d04 <modify_green_led+0x84>)
 8001cca:	f000 fcee 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	480b      	ldr	r0, [pc, #44]	; (8001d00 <modify_green_led+0x80>)
 8001cd4:	f000 fce9 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	480a      	ldr	r0, [pc, #40]	; (8001d08 <modify_green_led+0x88>)
 8001cde:	f000 fce4 	bl	80026aa <HAL_GPIO_WritePin>
		setTimer(3, 500);
 8001ce2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f7ff fc28 	bl	800153c <setTimer>
	}
//	update_led_buffer_B(3); // mode name
//	update_led_buffer_A(newTime); // new time
//	display();
	display_lcd(3, newTime);
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <modify_green_led+0x8c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f7fe ff74 	bl	8000be0 <display_lcd>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000540 	.word	0x20000540
 8001d00:	40010c00 	.word	0x40010c00
 8001d04:	40010800 	.word	0x40010800
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	2000012c 	.word	0x2000012c

08001d10 <modify_amber_led>:
void modify_amber_led(){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	if(timers[3].flag == 1){
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <modify_amber_led+0x7c>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d12f      	bne.n	8001d7c <modify_amber_led+0x6c>
		HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2120      	movs	r1, #32
 8001d20:	481b      	ldr	r0, [pc, #108]	; (8001d90 <modify_amber_led+0x80>)
 8001d22:	f000 fcc2 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2108      	movs	r1, #8
 8001d2a:	4819      	ldr	r0, [pc, #100]	; (8001d90 <modify_amber_led+0x80>)
 8001d2c:	f000 fcbd 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d36:	4816      	ldr	r0, [pc, #88]	; (8001d90 <modify_amber_led+0x80>)
 8001d38:	f000 fcb7 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2110      	movs	r1, #16
 8001d40:	4813      	ldr	r0, [pc, #76]	; (8001d90 <modify_amber_led+0x80>)
 8001d42:	f000 fcb2 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d4c:	4811      	ldr	r0, [pc, #68]	; (8001d94 <modify_amber_led+0x84>)
 8001d4e:	f000 fcac 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d58:	480e      	ldr	r0, [pc, #56]	; (8001d94 <modify_amber_led+0x84>)
 8001d5a:	f000 fca6 	bl	80026aa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	480b      	ldr	r0, [pc, #44]	; (8001d90 <modify_amber_led+0x80>)
 8001d64:	f000 fca1 	bl	80026aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	480a      	ldr	r0, [pc, #40]	; (8001d98 <modify_amber_led+0x88>)
 8001d6e:	f000 fc9c 	bl	80026aa <HAL_GPIO_WritePin>
		setTimer(3, 500);
 8001d72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d76:	2003      	movs	r0, #3
 8001d78:	f7ff fbe0 	bl	800153c <setTimer>
	}
//	update_led_buffer_B(4); //  mode name
//	update_led_buffer_A(newTime); //new time
//	display();
	display_lcd(4, newTime);
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <modify_amber_led+0x8c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	2004      	movs	r0, #4
 8001d84:	f7fe ff2c 	bl	8000be0 <display_lcd>
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000540 	.word	0x20000540
 8001d90:	40010c00 	.word	0x40010c00
 8001d94:	40010800 	.word	0x40010800
 8001d98:	40011000 	.word	0x40011000
 8001d9c:	2000012c 	.word	0x2000012c

08001da0 <clear_all_led>:
void clear_all_led(){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2120      	movs	r1, #32
 8001da8:	4815      	ldr	r0, [pc, #84]	; (8001e00 <clear_all_led+0x60>)
 8001daa:	f000 fc7e 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2108      	movs	r1, #8
 8001db2:	4813      	ldr	r0, [pc, #76]	; (8001e00 <clear_all_led+0x60>)
 8001db4:	f000 fc79 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <clear_all_led+0x60>)
 8001dc0:	f000 fc73 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2110      	movs	r1, #16
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <clear_all_led+0x60>)
 8001dca:	f000 fc6e 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd4:	480b      	ldr	r0, [pc, #44]	; (8001e04 <clear_all_led+0x64>)
 8001dd6:	f000 fc68 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <clear_all_led+0x64>)
 8001de2:	f000 fc62 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2140      	movs	r1, #64	; 0x40
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <clear_all_led+0x60>)
 8001dec:	f000 fc5d 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <clear_all_led+0x68>)
 8001df6:	f000 fc58 	bl	80026aa <HAL_GPIO_WritePin>
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40010c00 	.word	0x40010c00
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40011000 	.word	0x40011000

08001e0c <manual_green_red>:
void manual_green_red(){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2120      	movs	r1, #32
 8001e14:	4817      	ldr	r0, [pc, #92]	; (8001e74 <manual_green_red+0x68>)
 8001e16:	f000 fc48 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	4815      	ldr	r0, [pc, #84]	; (8001e74 <manual_green_red+0x68>)
 8001e20:	f000 fc43 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e2a:	4813      	ldr	r0, [pc, #76]	; (8001e78 <manual_green_red+0x6c>)
 8001e2c:	f000 fc3d 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e36:	4810      	ldr	r0, [pc, #64]	; (8001e78 <manual_green_red+0x6c>)
 8001e38:	f000 fc37 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e42:	480c      	ldr	r0, [pc, #48]	; (8001e74 <manual_green_red+0x68>)
 8001e44:	f000 fc31 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <manual_green_red+0x68>)
 8001e4e:	f000 fc2c 	bl	80026aa <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	2140      	movs	r1, #64	; 0x40
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <manual_green_red+0x68>)
 8001e58:	f000 fc27 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	4806      	ldr	r0, [pc, #24]	; (8001e7c <manual_green_red+0x70>)
 8001e62:	f000 fc22 	bl	80026aa <HAL_GPIO_WritePin>
//	update_led_buffer_B(1); //  mode name
//	update_led_buffer_A(0); //00
//	display();
	display_lcd(1, 0);
 8001e66:	2100      	movs	r1, #0
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7fe feb9 	bl	8000be0 <display_lcd>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40010c00 	.word	0x40010c00
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	40011000 	.word	0x40011000

08001e80 <manual_red_green>:
void manual_red_green(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED0_A_GPIO_Port, LED0_A_Pin, SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	2120      	movs	r1, #32
 8001e88:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <manual_red_green+0x68>)
 8001e8a:	f000 fc0e 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_B_GPIO_Port, LED0_B_Pin, SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2108      	movs	r1, #8
 8001e92:	4815      	ldr	r0, [pc, #84]	; (8001ee8 <manual_red_green+0x68>)
 8001e94:	f000 fc09 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9e:	4813      	ldr	r0, [pc, #76]	; (8001eec <manual_red_green+0x6c>)
 8001ea0:	f000 fc03 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eaa:	4810      	ldr	r0, [pc, #64]	; (8001eec <manual_red_green+0x6c>)
 8001eac:	f000 fbfd 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb6:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <manual_red_green+0x68>)
 8001eb8:	f000 fbf7 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2110      	movs	r1, #16
 8001ec0:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <manual_red_green+0x68>)
 8001ec2:	f000 fbf2 	bl	80026aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED3_A_GPIO_Port, LED3_A_Pin, RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2140      	movs	r1, #64	; 0x40
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <manual_red_green+0x68>)
 8001ecc:	f000 fbed 	bl	80026aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_B_GPIO_Port, LED3_B_Pin, SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <manual_red_green+0x70>)
 8001ed6:	f000 fbe8 	bl	80026aa <HAL_GPIO_WritePin>
//	update_led_buffer_B(1); //  mode name
//	update_led_buffer_A(0); //00
//	display();
	display_lcd(1, 0);
 8001eda:	2100      	movs	r1, #0
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7fe fe7f 	bl	8000be0 <display_lcd>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40010c00 	.word	0x40010c00
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40011000 	.word	0x40011000

08001ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef4:	f7ff fcee 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001efa:	490c      	ldr	r1, [pc, #48]	; (8001f2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f10:	4c09      	ldr	r4, [pc, #36]	; (8001f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f003 fea5 	bl	8005c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f22:	f7fe ff4b 	bl	8000dbc <main>
  bx lr
 8001f26:	4770      	bx	lr
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001f30:	080065e8 	.word	0x080065e8
  ldr r2, =_sbss
 8001f34:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001f38:	200005b0 	.word	0x200005b0

08001f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC1_2_IRQHandler>
	...

08001f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_Init+0x28>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_Init+0x28>)
 8001f4a:	f043 0310 	orr.w	r3, r3, #16
 8001f4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f947 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 f808 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fb42 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f95f 	bl	800224e <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f927 	bl	80021fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	2000007c 	.word	0x2000007c
 8001fc4:	20000090 	.word	0x20000090
 8001fc8:	2000008c 	.word	0x2000008c

08001fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x1c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_IncTick+0x20>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a03      	ldr	r2, [pc, #12]	; (8001fec <HAL_IncTick+0x20>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000090 	.word	0x20000090
 8001fec:	2000059c 	.word	0x2000059c

08001ff0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_GetTick+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	2000059c 	.word	0x2000059c

08002004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff fff0 	bl	8001ff0 <HAL_GetTick>
 8002010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d005      	beq.n	800202a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_Delay+0x44>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800202a:	bf00      	nop
 800202c:	f7ff ffe0 	bl	8001ff0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d8f7      	bhi.n	800202c <HAL_Delay+0x28>
  {
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000090 	.word	0x20000090

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4906      	ldr	r1, [pc, #24]	; (80020e4 <__NVIC_EnableIRQ+0x34>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f7ff ff90 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff2d 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff42 	bl	8002094 <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff90 	bl	800213c <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5f 	bl	80020e8 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff35 	bl	80020b0 <__NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffa2 	bl	80021a0 <SysTick_Config>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d005      	beq.n	800228c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2204      	movs	r2, #4
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	e051      	b.n	8002330 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020e 	bic.w	r2, r2, #14
 800229a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a22      	ldr	r2, [pc, #136]	; (800233c <HAL_DMA_Abort_IT+0xd4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d029      	beq.n	800230a <HAL_DMA_Abort_IT+0xa2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a21      	ldr	r2, [pc, #132]	; (8002340 <HAL_DMA_Abort_IT+0xd8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <HAL_DMA_Abort_IT+0x9e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_DMA_Abort_IT+0xdc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01a      	beq.n	8002300 <HAL_DMA_Abort_IT+0x98>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_DMA_Abort_IT+0xe0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d012      	beq.n	80022fa <HAL_DMA_Abort_IT+0x92>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_DMA_Abort_IT+0xe4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00a      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x8c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_DMA_Abort_IT+0xe8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <HAL_DMA_Abort_IT+0x86>
 80022e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022ec:	e00e      	b.n	800230c <HAL_DMA_Abort_IT+0xa4>
 80022ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f2:	e00b      	b.n	800230c <HAL_DMA_Abort_IT+0xa4>
 80022f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f8:	e008      	b.n	800230c <HAL_DMA_Abort_IT+0xa4>
 80022fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fe:	e005      	b.n	800230c <HAL_DMA_Abort_IT+0xa4>
 8002300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002304:	e002      	b.n	800230c <HAL_DMA_Abort_IT+0xa4>
 8002306:	2310      	movs	r3, #16
 8002308:	e000      	b.n	800230c <HAL_DMA_Abort_IT+0xa4>
 800230a:	2301      	movs	r3, #1
 800230c:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_DMA_Abort_IT+0xec>)
 800230e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
    } 
  }
  return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40020008 	.word	0x40020008
 8002340:	4002001c 	.word	0x4002001c
 8002344:	40020030 	.word	0x40020030
 8002348:	40020044 	.word	0x40020044
 800234c:	40020058 	.word	0x40020058
 8002350:	4002006c 	.word	0x4002006c
 8002354:	40020000 	.word	0x40020000

08002358 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002366:	b2db      	uxtb	r3, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
	...

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b08b      	sub	sp, #44	; 0x2c
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002386:	e169      	b.n	800265c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002388:	2201      	movs	r2, #1
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 8158 	bne.w	8002656 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a9a      	ldr	r2, [pc, #616]	; (8002614 <HAL_GPIO_Init+0x2a0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d05e      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023b0:	4a98      	ldr	r2, [pc, #608]	; (8002614 <HAL_GPIO_Init+0x2a0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d875      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023b6:	4a98      	ldr	r2, [pc, #608]	; (8002618 <HAL_GPIO_Init+0x2a4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d058      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023bc:	4a96      	ldr	r2, [pc, #600]	; (8002618 <HAL_GPIO_Init+0x2a4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d86f      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023c2:	4a96      	ldr	r2, [pc, #600]	; (800261c <HAL_GPIO_Init+0x2a8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d052      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023c8:	4a94      	ldr	r2, [pc, #592]	; (800261c <HAL_GPIO_Init+0x2a8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d869      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023ce:	4a94      	ldr	r2, [pc, #592]	; (8002620 <HAL_GPIO_Init+0x2ac>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04c      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023d4:	4a92      	ldr	r2, [pc, #584]	; (8002620 <HAL_GPIO_Init+0x2ac>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d863      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023da:	4a92      	ldr	r2, [pc, #584]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d046      	beq.n	800246e <HAL_GPIO_Init+0xfa>
 80023e0:	4a90      	ldr	r2, [pc, #576]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d85d      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023e6:	2b12      	cmp	r3, #18
 80023e8:	d82a      	bhi.n	8002440 <HAL_GPIO_Init+0xcc>
 80023ea:	2b12      	cmp	r3, #18
 80023ec:	d859      	bhi.n	80024a2 <HAL_GPIO_Init+0x12e>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <HAL_GPIO_Init+0x80>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	0800246f 	.word	0x0800246f
 80023f8:	08002449 	.word	0x08002449
 80023fc:	0800245b 	.word	0x0800245b
 8002400:	0800249d 	.word	0x0800249d
 8002404:	080024a3 	.word	0x080024a3
 8002408:	080024a3 	.word	0x080024a3
 800240c:	080024a3 	.word	0x080024a3
 8002410:	080024a3 	.word	0x080024a3
 8002414:	080024a3 	.word	0x080024a3
 8002418:	080024a3 	.word	0x080024a3
 800241c:	080024a3 	.word	0x080024a3
 8002420:	080024a3 	.word	0x080024a3
 8002424:	080024a3 	.word	0x080024a3
 8002428:	080024a3 	.word	0x080024a3
 800242c:	080024a3 	.word	0x080024a3
 8002430:	080024a3 	.word	0x080024a3
 8002434:	080024a3 	.word	0x080024a3
 8002438:	08002451 	.word	0x08002451
 800243c:	08002465 	.word	0x08002465
 8002440:	4a79      	ldr	r2, [pc, #484]	; (8002628 <HAL_GPIO_Init+0x2b4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002446:	e02c      	b.n	80024a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	623b      	str	r3, [r7, #32]
          break;
 800244e:	e029      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	3304      	adds	r3, #4
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e024      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	3308      	adds	r3, #8
 8002460:	623b      	str	r3, [r7, #32]
          break;
 8002462:	e01f      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	330c      	adds	r3, #12
 800246a:	623b      	str	r3, [r7, #32]
          break;
 800246c:	e01a      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002476:	2304      	movs	r3, #4
 8002478:	623b      	str	r3, [r7, #32]
          break;
 800247a:	e013      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002484:	2308      	movs	r3, #8
 8002486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	611a      	str	r2, [r3, #16]
          break;
 800248e:	e009      	b.n	80024a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002490:	2308      	movs	r3, #8
 8002492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	615a      	str	r2, [r3, #20]
          break;
 800249a:	e003      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800249c:	2300      	movs	r3, #0
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x130>
          break;
 80024a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	d801      	bhi.n	80024ae <HAL_GPIO_Init+0x13a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	e001      	b.n	80024b2 <HAL_GPIO_Init+0x13e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2bff      	cmp	r3, #255	; 0xff
 80024b8:	d802      	bhi.n	80024c0 <HAL_GPIO_Init+0x14c>
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	e002      	b.n	80024c6 <HAL_GPIO_Init+0x152>
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	3b08      	subs	r3, #8
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	210f      	movs	r1, #15
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	401a      	ands	r2, r3
 80024d8:	6a39      	ldr	r1, [r7, #32]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80b1 	beq.w	8002656 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024f4:	4b4d      	ldr	r3, [pc, #308]	; (800262c <HAL_GPIO_Init+0x2b8>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	; (800262c <HAL_GPIO_Init+0x2b8>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_GPIO_Init+0x2b8>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800250c:	4a48      	ldr	r2, [pc, #288]	; (8002630 <HAL_GPIO_Init+0x2bc>)
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a40      	ldr	r2, [pc, #256]	; (8002634 <HAL_GPIO_Init+0x2c0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <HAL_GPIO_Init+0x1ec>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3f      	ldr	r2, [pc, #252]	; (8002638 <HAL_GPIO_Init+0x2c4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00d      	beq.n	800255c <HAL_GPIO_Init+0x1e8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3e      	ldr	r2, [pc, #248]	; (800263c <HAL_GPIO_Init+0x2c8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <HAL_GPIO_Init+0x1e4>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3d      	ldr	r2, [pc, #244]	; (8002640 <HAL_GPIO_Init+0x2cc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_GPIO_Init+0x1e0>
 8002550:	2303      	movs	r3, #3
 8002552:	e006      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002554:	2304      	movs	r3, #4
 8002556:	e004      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002558:	2302      	movs	r3, #2
 800255a:	e002      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_GPIO_Init+0x1ee>
 8002560:	2300      	movs	r3, #0
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	f002 0203 	and.w	r2, r2, #3
 8002568:	0092      	lsls	r2, r2, #2
 800256a:	4093      	lsls	r3, r2
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002572:	492f      	ldr	r1, [pc, #188]	; (8002630 <HAL_GPIO_Init+0x2bc>)
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	492c      	ldr	r1, [pc, #176]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	4928      	ldr	r1, [pc, #160]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	4922      	ldr	r1, [pc, #136]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	491e      	ldr	r1, [pc, #120]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4918      	ldr	r1, [pc, #96]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4914      	ldr	r1, [pc, #80]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d021      	beq.n	8002648 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	490e      	ldr	r1, [pc, #56]	; (8002644 <HAL_GPIO_Init+0x2d0>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	e021      	b.n	8002656 <HAL_GPIO_Init+0x2e2>
 8002612:	bf00      	nop
 8002614:	10320000 	.word	0x10320000
 8002618:	10310000 	.word	0x10310000
 800261c:	10220000 	.word	0x10220000
 8002620:	10210000 	.word	0x10210000
 8002624:	10120000 	.word	0x10120000
 8002628:	10110000 	.word	0x10110000
 800262c:	40021000 	.word	0x40021000
 8002630:	40010000 	.word	0x40010000
 8002634:	40010800 	.word	0x40010800
 8002638:	40010c00 	.word	0x40010c00
 800263c:	40011000 	.word	0x40011000
 8002640:	40011400 	.word	0x40011400
 8002644:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_GPIO_Init+0x304>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	43db      	mvns	r3, r3
 8002650:	4909      	ldr	r1, [pc, #36]	; (8002678 <HAL_GPIO_Init+0x304>)
 8002652:	4013      	ands	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	3301      	adds	r3, #1
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	fa22 f303 	lsr.w	r3, r2, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	f47f ae8e 	bne.w	8002388 <HAL_GPIO_Init+0x14>
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	372c      	adds	r7, #44	; 0x2c
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e001      	b.n	800269e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	807b      	strh	r3, [r7, #2]
 80026b6:	4613      	mov	r3, r2
 80026b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ba:	787b      	ldrb	r3, [r7, #1]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c0:	887a      	ldrh	r2, [r7, #2]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c6:	e003      	b.n	80026d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	041a      	lsls	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	611a      	str	r2, [r3, #16]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ec:	887a      	ldrh	r2, [r7, #2]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4013      	ands	r3, r2
 80026f2:	041a      	lsls	r2, r3, #16
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43d9      	mvns	r1, r3
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	400b      	ands	r3, r1
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	611a      	str	r2, [r3, #16]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f806 	bl	800273c <HAL_GPIO_EXTI_Callback>
  }
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e12b      	b.n	80029ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe ff66 	bl	8001648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b4:	f002 fd3e 	bl	8005234 <HAL_RCC_GetPCLK1Freq>
 80027b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a81      	ldr	r2, [pc, #516]	; (80029c4 <HAL_I2C_Init+0x274>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d807      	bhi.n	80027d4 <HAL_I2C_Init+0x84>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a80      	ldr	r2, [pc, #512]	; (80029c8 <HAL_I2C_Init+0x278>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e006      	b.n	80027e2 <HAL_I2C_Init+0x92>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a7d      	ldr	r2, [pc, #500]	; (80029cc <HAL_I2C_Init+0x27c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0e7      	b.n	80029ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a78      	ldr	r2, [pc, #480]	; (80029d0 <HAL_I2C_Init+0x280>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0c9b      	lsrs	r3, r3, #18
 80027f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <HAL_I2C_Init+0x274>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d802      	bhi.n	8002824 <HAL_I2C_Init+0xd4>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3301      	adds	r3, #1
 8002822:	e009      	b.n	8002838 <HAL_I2C_Init+0xe8>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	4a69      	ldr	r2, [pc, #420]	; (80029d4 <HAL_I2C_Init+0x284>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	3301      	adds	r3, #1
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	430b      	orrs	r3, r1
 800283e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800284a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	495c      	ldr	r1, [pc, #368]	; (80029c4 <HAL_I2C_Init+0x274>)
 8002854:	428b      	cmp	r3, r1
 8002856:	d819      	bhi.n	800288c <HAL_I2C_Init+0x13c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1e59      	subs	r1, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fbb1 f3f3 	udiv	r3, r1, r3
 8002866:	1c59      	adds	r1, r3, #1
 8002868:	f640 73fc 	movw	r3, #4092	; 0xffc
 800286c:	400b      	ands	r3, r1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_I2C_Init+0x138>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e59      	subs	r1, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002886:	e051      	b.n	800292c <HAL_I2C_Init+0x1dc>
 8002888:	2304      	movs	r3, #4
 800288a:	e04f      	b.n	800292c <HAL_I2C_Init+0x1dc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d111      	bne.n	80028b8 <HAL_I2C_Init+0x168>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	440b      	add	r3, r1
 80028a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e012      	b.n	80028de <HAL_I2C_Init+0x18e>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Init+0x196>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e022      	b.n	800292c <HAL_I2C_Init+0x1dc>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10e      	bne.n	800290c <HAL_I2C_Init+0x1bc>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1e58      	subs	r0, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	440b      	add	r3, r1
 80028fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290a:	e00f      	b.n	800292c <HAL_I2C_Init+0x1dc>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e58      	subs	r0, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	0099      	lsls	r1, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002922:	3301      	adds	r3, #1
 8002924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	6809      	ldr	r1, [r1, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800295a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6911      	ldr	r1, [r2, #16]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	430b      	orrs	r3, r1
 800296e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	000186a0 	.word	0x000186a0
 80029c8:	001e847f 	.word	0x001e847f
 80029cc:	003d08ff 	.word	0x003d08ff
 80029d0:	431bde83 	.word	0x431bde83
 80029d4:	10624dd3 	.word	0x10624dd3

080029d8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b80      	cmp	r3, #128	; 0x80
 80029ec:	d103      	bne.n	80029f6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	817b      	strh	r3, [r7, #10]
 8002a10:	4613      	mov	r3, r2
 8002a12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff faec 	bl	8001ff0 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	f040 80e0 	bne.w	8002be8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2319      	movs	r3, #25
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4970      	ldr	r1, [pc, #448]	; (8002bf4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f001 fe12 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0d3      	b.n	8002bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_I2C_Master_Transmit+0x50>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e0cc      	b.n	8002bea <HAL_I2C_Master_Transmit+0x1ea>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d007      	beq.n	8002a76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2221      	movs	r2, #33	; 0x21
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2210      	movs	r2, #16
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a50      	ldr	r2, [pc, #320]	; (8002bf8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ab8:	8979      	ldrh	r1, [r7, #10]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	6a3a      	ldr	r2, [r7, #32]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f001 fca2 	bl	8004408 <I2C_MasterRequestWrite>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e08d      	b.n	8002bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ae4:	e066      	b.n	8002bb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	6a39      	ldr	r1, [r7, #32]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f001 fed0 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00d      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d107      	bne.n	8002b0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e06b      	b.n	8002bea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	781a      	ldrb	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d11b      	bne.n	8002b88 <HAL_I2C_Master_Transmit+0x188>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d017      	beq.n	8002b88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	6a39      	ldr	r1, [r7, #32]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f001 fec7 	bl	8004920 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00d      	beq.n	8002bb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d107      	bne.n	8002bb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e01a      	b.n	8002bea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d194      	bne.n	8002ae6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	00100002 	.word	0x00100002
 8002bf8:	ffff0000 	.word	0xffff0000

08002bfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d003      	beq.n	8002c34 <HAL_I2C_EV_IRQHandler+0x38>
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	f040 80c1 	bne.w	8002db6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_I2C_EV_IRQHandler+0x6e>
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c54:	d003      	beq.n	8002c5e <HAL_I2C_EV_IRQHandler+0x62>
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_EV_IRQHandler+0x66>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_I2C_EV_IRQHandler+0x68>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f000 8132 	beq.w	8002ece <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00c      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x92>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	0a5b      	lsrs	r3, r3, #9
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f001 fef5 	bl	8004a70 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fd99 	bl	80037be <I2C_Master_SB>
 8002c8c:	e092      	b.n	8002db4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <HAL_I2C_EV_IRQHandler+0xb2>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	0a5b      	lsrs	r3, r3, #9
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fe0e 	bl	80038c8 <I2C_Master_ADD10>
 8002cac:	e082      	b.n	8002db4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0xd2>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fe27 	bl	800391a <I2C_Master_ADDR>
 8002ccc:	e072      	b.n	8002db4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03b      	beq.n	8002d52 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce8:	f000 80f3 	beq.w	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	09db      	lsrs	r3, r3, #7
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00f      	beq.n	8002d18 <HAL_I2C_EV_IRQHandler+0x11c>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	0a9b      	lsrs	r3, r3, #10
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f9f1 	bl	80030f8 <I2C_MasterTransmit_TXE>
 8002d16:	e04d      	b.n	8002db4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80d6 	beq.w	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	0a5b      	lsrs	r3, r3, #9
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80cf 	beq.w	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	2b21      	cmp	r3, #33	; 0x21
 8002d38:	d103      	bne.n	8002d42 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa78 	bl	8003230 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d40:	e0c7      	b.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	f040 80c4 	bne.w	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fae6 	bl	800331c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d50:	e0bf      	b.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d60:	f000 80b7 	beq.w	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00f      	beq.n	8002d90 <HAL_I2C_EV_IRQHandler+0x194>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	0a9b      	lsrs	r3, r3, #10
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_I2C_EV_IRQHandler+0x194>
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fb5f 	bl	800344c <I2C_MasterReceive_RXNE>
 8002d8e:	e011      	b.n	8002db4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 809a 	beq.w	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	0a5b      	lsrs	r3, r3, #9
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8093 	beq.w	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fc15 	bl	80035dc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db2:	e08e      	b.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002db4:	e08d      	b.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e007      	b.n	8002dd8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x20e>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	0a5b      	lsrs	r3, r3, #9
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e00:	69b9      	ldr	r1, [r7, #24]
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 ffe0 	bl	8003dc8 <I2C_Slave_ADDR>
 8002e08:	e066      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0x22e>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	0a5b      	lsrs	r3, r3, #9
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f001 f81a 	bl	8003e5c <I2C_Slave_STOPF>
 8002e28:	e056      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e2a:	7bbb      	ldrb	r3, [r7, #14]
 8002e2c:	2b21      	cmp	r3, #33	; 0x21
 8002e2e:	d002      	beq.n	8002e36 <HAL_I2C_EV_IRQHandler+0x23a>
 8002e30:	7bbb      	ldrb	r3, [r7, #14]
 8002e32:	2b29      	cmp	r3, #41	; 0x29
 8002e34:	d125      	bne.n	8002e82 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	09db      	lsrs	r3, r3, #7
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00f      	beq.n	8002e62 <HAL_I2C_EV_IRQHandler+0x266>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	0a9b      	lsrs	r3, r3, #10
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_I2C_EV_IRQHandler+0x266>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fef8 	bl	8003c50 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e60:	e039      	b.n	8002ed6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d033      	beq.n	8002ed6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	0a5b      	lsrs	r3, r3, #9
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02d      	beq.n	8002ed6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 ff25 	bl	8003cca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e80:	e029      	b.n	8002ed6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00f      	beq.n	8002eae <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	0a9b      	lsrs	r3, r3, #10
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 ff2f 	bl	8003d0a <I2C_SlaveReceive_RXNE>
 8002eac:	e014      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	0a5b      	lsrs	r3, r3, #9
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 ff5d 	bl	8003d86 <I2C_SlaveReceive_BTF>
 8002ecc:	e004      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ed6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b08a      	sub	sp, #40	; 0x28
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f00:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_I2C_ER_IRQHandler+0x5e>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d010      	beq.n	8002f3c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f2a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	0a5b      	lsrs	r3, r3, #9
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <HAL_I2C_ER_IRQHandler+0x88>
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	f043 0302 	orr.w	r3, r3, #2
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	0a9b      	lsrs	r3, r3, #10
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d03f      	beq.n	8002ff2 <HAL_I2C_ER_IRQHandler+0x114>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d039      	beq.n	8002ff2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002f7e:	7efb      	ldrb	r3, [r7, #27]
 8002f80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f98:	7ebb      	ldrb	r3, [r7, #26]
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d112      	bne.n	8002fc4 <HAL_I2C_ER_IRQHandler+0xe6>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10f      	bne.n	8002fc4 <HAL_I2C_ER_IRQHandler+0xe6>
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b21      	cmp	r3, #33	; 0x21
 8002fa8:	d008      	beq.n	8002fbc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b29      	cmp	r3, #41	; 0x29
 8002fae:	d005      	beq.n	8002fbc <HAL_I2C_ER_IRQHandler+0xde>
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b28      	cmp	r3, #40	; 0x28
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b21      	cmp	r3, #33	; 0x21
 8002fba:	d103      	bne.n	8002fc4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f001 f87d 	bl	80040bc <I2C_Slave_AF>
 8002fc2:	e016      	b.n	8002ff2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fcc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fd6:	7efb      	ldrb	r3, [r7, #27]
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d002      	beq.n	8002fe2 <HAL_I2C_ER_IRQHandler+0x104>
 8002fdc:	7efb      	ldrb	r3, [r7, #27]
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d107      	bne.n	8002ff2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	0adb      	lsrs	r3, r3, #11
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00e      	beq.n	800301c <HAL_I2C_ER_IRQHandler+0x13e>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	f043 0308 	orr.w	r3, r3, #8
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800301a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f001 f8b8 	bl	80041a4 <I2C_ITError>
  }
}
 8003034:	bf00      	nop
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
 8003090:	4613      	mov	r3, r2
 8003092:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d150      	bne.n	80031c0 <I2C_MasterTransmit_TXE+0xc8>
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b21      	cmp	r3, #33	; 0x21
 8003122:	d14d      	bne.n	80031c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b08      	cmp	r3, #8
 8003128:	d01d      	beq.n	8003166 <I2C_MasterTransmit_TXE+0x6e>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b20      	cmp	r3, #32
 800312e:	d01a      	beq.n	8003166 <I2C_MasterTransmit_TXE+0x6e>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003136:	d016      	beq.n	8003166 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003146:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2211      	movs	r2, #17
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff6c 	bl	800303c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003164:	e060      	b.n	8003228 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003174:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003184:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d107      	bne.n	80031b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff81 	bl	80030b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031ae:	e03b      	b.n	8003228 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff3f 	bl	800303c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031be:	e033      	b.n	8003228 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b21      	cmp	r3, #33	; 0x21
 80031c4:	d005      	beq.n	80031d2 <I2C_MasterTransmit_TXE+0xda>
 80031c6:	7bbb      	ldrb	r3, [r7, #14]
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d12d      	bne.n	8003228 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b22      	cmp	r3, #34	; 0x22
 80031d0:	d12a      	bne.n	8003228 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d108      	bne.n	80031ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80031ec:	e01c      	b.n	8003228 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d103      	bne.n	8003202 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f88e 	bl	800331c <I2C_MemoryTransmit_TXE_BTF>
}
 8003200:	e012      	b.n	8003228 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003226:	e7ff      	b.n	8003228 <I2C_MasterTransmit_TXE+0x130>
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b21      	cmp	r3, #33	; 0x21
 8003248:	d164      	bne.n	8003314 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d012      	beq.n	800327a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003278:	e04c      	b.n	8003314 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d01d      	beq.n	80032bc <I2C_MasterTransmit_BTF+0x8c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b20      	cmp	r3, #32
 8003284:	d01a      	beq.n	80032bc <I2C_MasterTransmit_BTF+0x8c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800328c:	d016      	beq.n	80032bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800329c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2211      	movs	r2, #17
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fec1 	bl	800303c <HAL_I2C_MasterTxCpltCallback>
}
 80032ba:	e02b      	b.n	8003314 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d107      	bne.n	8003306 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fed6 	bl	80030b0 <HAL_I2C_MemTxCpltCallback>
}
 8003304:	e006      	b.n	8003314 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fe94 	bl	800303c <HAL_I2C_MasterTxCpltCallback>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11d      	bne.n	8003370 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10b      	bne.n	8003354 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	b2da      	uxtb	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334c:	1c9a      	adds	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003352:	e077      	b.n	8003444 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	b29b      	uxth	r3, r3
 800335a:	121b      	asrs	r3, r3, #8
 800335c:	b2da      	uxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800336e:	e069      	b.n	8003444 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10b      	bne.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337c:	b2da      	uxtb	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800338e:	e059      	b.n	8003444 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	2b02      	cmp	r3, #2
 8003396:	d152      	bne.n	800343e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b22      	cmp	r3, #34	; 0x22
 800339c:	d10d      	bne.n	80033ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033b8:	e044      	b.n	8003444 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b21      	cmp	r3, #33	; 0x21
 80033c8:	d112      	bne.n	80033f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033ee:	e029      	b.n	8003444 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d124      	bne.n	8003444 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b21      	cmp	r3, #33	; 0x21
 80033fe:	d121      	bne.n	8003444 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fe3a 	bl	80030b0 <HAL_I2C_MemTxCpltCallback>
}
 800343c:	e002      	b.n	8003444 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff faca 	bl	80029d8 <I2C_Flush_DR>
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b22      	cmp	r3, #34	; 0x22
 800345e:	f040 80b9 	bne.w	80035d4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d921      	bls.n	80034ba <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	f040 8096 	bne.w	80035d4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80034b8:	e08c      	b.n	80035d4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d07f      	beq.n	80035c2 <I2C_MasterReceive_RXNE+0x176>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <I2C_MasterReceive_RXNE+0x82>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d179      	bne.n	80035c2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 fa6e 	bl	80049b0 <I2C_WaitOnSTOPRequestThroughIT>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d14c      	bne.n	8003574 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d10a      	bne.n	800354a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff fdbd 	bl	80030c2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003548:	e044      	b.n	80035d4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d002      	beq.n	800355e <I2C_MasterReceive_RXNE+0x112>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b20      	cmp	r3, #32
 800355c:	d103      	bne.n	8003566 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
 8003564:	e002      	b.n	800356c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2212      	movs	r2, #18
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fd6e 	bl	800304e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003572:	e02f      	b.n	80035d4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003582:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fd8a 	bl	80030d4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035c0:	e008      	b.n	80035d4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d0:	605a      	str	r2, [r3, #4]
}
 80035d2:	e7ff      	b.n	80035d4 <I2C_MasterReceive_RXNE+0x188>
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d11b      	bne.n	800362c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003602:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800362a:	e0c4      	b.n	80037b6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b03      	cmp	r3, #3
 8003634:	d129      	bne.n	800368a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003644:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d00a      	beq.n	8003662 <I2C_MasterReceive_BTF+0x86>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d007      	beq.n	8003662 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003660:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003688:	e095      	b.n	80037b6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d17d      	bne.n	8003790 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d002      	beq.n	80036a0 <I2C_MasterReceive_BTF+0xc4>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b10      	cmp	r3, #16
 800369e:	d108      	bne.n	80036b2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e016      	b.n	80036e0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d002      	beq.n	80036be <I2C_MasterReceive_BTF+0xe2>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d108      	bne.n	80036d0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e007      	b.n	80036e0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800373a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d10a      	bne.n	8003766 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fcaf 	bl	80030c2 <HAL_I2C_MemRxCpltCallback>
}
 8003764:	e027      	b.n	80037b6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d002      	beq.n	800377a <I2C_MasterReceive_BTF+0x19e>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b20      	cmp	r3, #32
 8003778:	d103      	bne.n	8003782 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
 8003780:	e002      	b.n	8003788 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2212      	movs	r2, #18
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fc60 	bl	800304e <HAL_I2C_MasterRxCpltCallback>
}
 800378e:	e012      	b.n	80037b6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b40      	cmp	r3, #64	; 0x40
 80037d0:	d117      	bne.n	8003802 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80037ec:	e067      	b.n	80038be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]
}
 8003800:	e05d      	b.n	80038be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380a:	d133      	bne.n	8003874 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b21      	cmp	r3, #33	; 0x21
 8003816:	d109      	bne.n	800382c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003828:	611a      	str	r2, [r3, #16]
 800382a:	e008      	b.n	800383e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <I2C_Master_SB+0x92>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d108      	bne.n	8003862 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d032      	beq.n	80038be <I2C_Master_SB+0x100>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	2b00      	cmp	r3, #0
 8003860:	d02d      	beq.n	80038be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003870:	605a      	str	r2, [r3, #4]
}
 8003872:	e024      	b.n	80038be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10e      	bne.n	800389a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	b29b      	uxth	r3, r3
 8003882:	11db      	asrs	r3, r3, #7
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 0306 	and.w	r3, r3, #6
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f063 030f 	orn	r3, r3, #15
 8003890:	b2da      	uxtb	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]
}
 8003898:	e011      	b.n	80038be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10d      	bne.n	80038be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	11db      	asrs	r3, r3, #7
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 0306 	and.w	r3, r3, #6
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f063 030e 	orn	r3, r3, #14
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <I2C_Master_ADD10+0x26>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d108      	bne.n	8003900 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <I2C_Master_ADD10+0x48>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390e:	605a      	str	r2, [r3, #4]
  }
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800391a:	b480      	push	{r7}
 800391c:	b091      	sub	sp, #68	; 0x44
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b22      	cmp	r3, #34	; 0x22
 8003942:	f040 8174 	bne.w	8003c2e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <I2C_Master_ADDR+0x54>
 800394e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d10b      	bne.n	800396e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	633b      	str	r3, [r7, #48]	; 0x30
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	e16b      	b.n	8003c46 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11d      	bne.n	80039b2 <I2C_Master_ADDR+0x98>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800397e:	d118      	bne.n	80039b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	651a      	str	r2, [r3, #80]	; 0x50
 80039b0:	e149      	b.n	8003c46 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d113      	bne.n	80039e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039bc:	2300      	movs	r3, #0
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e120      	b.n	8003c26 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	f040 808a 	bne.w	8003b04 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039f6:	d137      	bne.n	8003a68 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a06:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a16:	d113      	bne.n	8003a40 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a26:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	e0f2      	b.n	8003c26 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	623b      	str	r3, [r7, #32]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e0de      	b.n	8003c26 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d02e      	beq.n	8003acc <I2C_Master_ADDR+0x1b2>
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d02b      	beq.n	8003acc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	2b12      	cmp	r3, #18
 8003a78:	d102      	bne.n	8003a80 <I2C_Master_ADDR+0x166>
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d125      	bne.n	8003acc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d00e      	beq.n	8003aa4 <I2C_Master_ADDR+0x18a>
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d00b      	beq.n	8003aa4 <I2C_Master_ADDR+0x18a>
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d008      	beq.n	8003aa4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e007      	b.n	8003ab4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ab2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	e0ac      	b.n	8003c26 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ada:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e090      	b.n	8003c26 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d158      	bne.n	8003bc0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d021      	beq.n	8003b58 <I2C_Master_ADDR+0x23e>
 8003b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d01e      	beq.n	8003b58 <I2C_Master_ADDR+0x23e>
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d01b      	beq.n	8003b58 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e012      	b.n	8003b7e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8c:	d14b      	bne.n	8003c26 <I2C_Master_ADDR+0x30c>
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b94:	d00b      	beq.n	8003bae <I2C_Master_ADDR+0x294>
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d008      	beq.n	8003bae <I2C_Master_ADDR+0x294>
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d005      	beq.n	8003bae <I2C_Master_ADDR+0x294>
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d002      	beq.n	8003bae <I2C_Master_ADDR+0x294>
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d13b      	bne.n	8003c26 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	e032      	b.n	8003c26 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bde:	d117      	bne.n	8003c10 <I2C_Master_ADDR+0x2f6>
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003be6:	d00b      	beq.n	8003c00 <I2C_Master_ADDR+0x2e6>
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d008      	beq.n	8003c00 <I2C_Master_ADDR+0x2e6>
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d005      	beq.n	8003c00 <I2C_Master_ADDR+0x2e6>
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d002      	beq.n	8003c00 <I2C_Master_ADDR+0x2e6>
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d107      	bne.n	8003c10 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c0e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c2c:	e00b      	b.n	8003c46 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
}
 8003c44:	e7ff      	b.n	8003c46 <I2C_Master_ADDR+0x32c>
 8003c46:	bf00      	nop
 8003c48:	3744      	adds	r7, #68	; 0x44
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02b      	beq.n	8003cc2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d114      	bne.n	8003cc2 <I2C_SlaveTransmit_TXE+0x72>
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b29      	cmp	r3, #41	; 0x29
 8003c9c:	d111      	bne.n	8003cc2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2221      	movs	r2, #33	; 0x21
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2228      	movs	r2, #40	; 0x28
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff f9cf 	bl	8003060 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d011      	beq.n	8003d00 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02c      	beq.n	8003d7e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d114      	bne.n	8003d7e <I2C_SlaveReceive_RXNE+0x74>
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b2a      	cmp	r3, #42	; 0x2a
 8003d58:	d111      	bne.n	8003d7e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2222      	movs	r2, #34	; 0x22
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2228      	movs	r2, #40	; 0x28
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff f97a 	bl	8003072 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d012      	beq.n	8003dbe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003de2:	2b28      	cmp	r3, #40	; 0x28
 8003de4:	d127      	bne.n	8003e36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	09db      	lsrs	r3, r3, #7
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	81bb      	strh	r3, [r7, #12]
 8003e18:	e002      	b.n	8003e20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e28:	89ba      	ldrh	r2, [r7, #12]
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff f928 	bl	8003084 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e34:	e00e      	b.n	8003e54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb8:	d172      	bne.n	8003fa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b22      	cmp	r3, #34	; 0x22
 8003ebe:	d002      	beq.n	8003ec6 <I2C_Slave_STOPF+0x6a>
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec4:	d135      	bne.n	8003f32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f043 0204 	orr.w	r2, r3, #4
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fa2a 	bl	8002358 <HAL_DMA_GetState>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d049      	beq.n	8003f9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	4a69      	ldr	r2, [pc, #420]	; (80040b4 <I2C_Slave_STOPF+0x258>)
 8003f10:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe f9a6 	bl	8002268 <HAL_DMA_Abort_IT>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d03d      	beq.n	8003f9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f30:	e035      	b.n	8003f9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0204 	orr.w	r2, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe f9f4 	bl	8002358 <HAL_DMA_GetState>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d014      	beq.n	8003fa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <I2C_Slave_STOPF+0x258>)
 8003f7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe f970 	bl	8002268 <HAL_DMA_Abort_IT>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4798      	blx	r3
 8003f9c:	e000      	b.n	8003fa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d03e      	beq.n	8004028 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d112      	bne.n	8003fde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d112      	bne.n	8004012 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f043 0204 	orr.w	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8b7 	bl	80041a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004036:	e039      	b.n	80040ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b2a      	cmp	r3, #42	; 0x2a
 800403c:	d109      	bne.n	8004052 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2228      	movs	r2, #40	; 0x28
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff f810 	bl	8003072 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b28      	cmp	r3, #40	; 0x28
 800405c:	d111      	bne.n	8004082 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <I2C_Slave_STOPF+0x25c>)
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff f80f 	bl	800309e <HAL_I2C_ListenCpltCallback>
}
 8004080:	e014      	b.n	80040ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	2b22      	cmp	r3, #34	; 0x22
 8004088:	d002      	beq.n	8004090 <I2C_Slave_STOPF+0x234>
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b22      	cmp	r3, #34	; 0x22
 800408e:	d10d      	bne.n	80040ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fe ffe3 	bl	8003072 <HAL_I2C_SlaveRxCpltCallback>
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	0800450d 	.word	0x0800450d
 80040b8:	ffff0000 	.word	0xffff0000

080040bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d002      	beq.n	80040de <I2C_Slave_AF+0x22>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d129      	bne.n	8004132 <I2C_Slave_AF+0x76>
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b28      	cmp	r3, #40	; 0x28
 80040e2:	d126      	bne.n	8004132 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a2e      	ldr	r2, [pc, #184]	; (80041a0 <I2C_Slave_AF+0xe4>)
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004102:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe ffb7 	bl	800309e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004130:	e031      	b.n	8004196 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b21      	cmp	r3, #33	; 0x21
 8004136:	d129      	bne.n	800418c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <I2C_Slave_AF+0xe4>)
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2221      	movs	r2, #33	; 0x21
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004162:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800416c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fe fc2a 	bl	80029d8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fe ff6b 	bl	8003060 <HAL_I2C_SlaveTxCpltCallback>
}
 800418a:	e004      	b.n	8004196 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004194:	615a      	str	r2, [r3, #20]
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	ffff0000 	.word	0xffff0000

080041a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041bc:	7bbb      	ldrb	r3, [r7, #14]
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d002      	beq.n	80041c8 <I2C_ITError+0x24>
 80041c2:	7bbb      	ldrb	r3, [r7, #14]
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d10a      	bne.n	80041de <I2C_ITError+0x3a>
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b22      	cmp	r3, #34	; 0x22
 80041cc:	d107      	bne.n	80041de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041e4:	2b28      	cmp	r3, #40	; 0x28
 80041e6:	d107      	bne.n	80041f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2228      	movs	r2, #40	; 0x28
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041f6:	e015      	b.n	8004224 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004206:	d00a      	beq.n	800421e <I2C_ITError+0x7a>
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b60      	cmp	r3, #96	; 0x60
 800420c:	d007      	beq.n	800421e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004232:	d162      	bne.n	80042fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004242:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004248:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d020      	beq.n	8004294 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	4a6a      	ldr	r2, [pc, #424]	; (8004400 <I2C_ITError+0x25c>)
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe f802 	bl	8002268 <HAL_DMA_Abort_IT>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8089 	beq.w	800437e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800428e:	4610      	mov	r0, r2
 8004290:	4798      	blx	r3
 8004292:	e074      	b.n	800437e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	4a59      	ldr	r2, [pc, #356]	; (8004400 <I2C_ITError+0x25c>)
 800429a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd ffe1 	bl	8002268 <HAL_DMA_Abort_IT>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d068      	beq.n	800437e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d10b      	bne.n	80042d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042f4:	4610      	mov	r0, r2
 80042f6:	4798      	blx	r3
 80042f8:	e041      	b.n	800437e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b60      	cmp	r3, #96	; 0x60
 8004304:	d125      	bne.n	8004352 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d10b      	bne.n	800433a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fe fecb 	bl	80030e6 <HAL_I2C_AbortCpltCallback>
 8004350:	e015      	b.n	800437e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d10b      	bne.n	8004378 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fe feab 	bl	80030d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10e      	bne.n	80043ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d113      	bne.n	80043f8 <I2C_ITError+0x254>
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b28      	cmp	r3, #40	; 0x28
 80043d4:	d110      	bne.n	80043f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <I2C_ITError+0x260>)
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fe fe53 	bl	800309e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	0800450d 	.word	0x0800450d
 8004404:	ffff0000 	.word	0xffff0000

08004408 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	607a      	str	r2, [r7, #4]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	460b      	mov	r3, r1
 8004416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d006      	beq.n	8004432 <I2C_MasterRequestWrite+0x2a>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d003      	beq.n	8004432 <I2C_MasterRequestWrite+0x2a>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004430:	d108      	bne.n	8004444 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e00b      	b.n	800445c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	2b12      	cmp	r3, #18
 800444a:	d107      	bne.n	800445c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f8f7 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004482:	d103      	bne.n	800448c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e035      	b.n	80044fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004498:	d108      	bne.n	80044ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800449a:	897b      	ldrh	r3, [r7, #10]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044a8:	611a      	str	r2, [r3, #16]
 80044aa:	e01b      	b.n	80044e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044ac:	897b      	ldrh	r3, [r7, #10]
 80044ae:	11db      	asrs	r3, r3, #7
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 0306 	and.w	r3, r3, #6
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f063 030f 	orn	r3, r3, #15
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	490e      	ldr	r1, [pc, #56]	; (8004504 <I2C_MasterRequestWrite+0xfc>)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f940 	bl	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e010      	b.n	80044fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044da:	897b      	ldrh	r3, [r7, #10]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4907      	ldr	r1, [pc, #28]	; (8004508 <I2C_MasterRequestWrite+0x100>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f930 	bl	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	00010008 	.word	0x00010008
 8004508:	00010002 	.word	0x00010002

0800450c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004526:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <I2C_DMAAbort+0x148>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	08db      	lsrs	r3, r3, #3
 800452c:	4a4a      	ldr	r2, [pc, #296]	; (8004658 <I2C_DMAAbort+0x14c>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	0a1a      	lsrs	r2, r3, #8
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00da      	lsls	r2, r3, #3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0220 	orr.w	r2, r3, #32
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004552:	e00a      	b.n	800456a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3b01      	subs	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004568:	d0ea      	beq.n	8004540 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	2200      	movs	r2, #0
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	2200      	movs	r2, #0
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	2200      	movs	r2, #0
 80045be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b60      	cmp	r3, #96	; 0x60
 80045da:	d10e      	bne.n	80045fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f7fe fd77 	bl	80030e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045f8:	e027      	b.n	800464a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004600:	2b28      	cmp	r3, #40	; 0x28
 8004602:	d117      	bne.n	8004634 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004622:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2228      	movs	r2, #40	; 0x28
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004632:	e007      	b.n	8004644 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f7fe fd45 	bl	80030d4 <HAL_I2C_ErrorCallback>
}
 800464a:	bf00      	nop
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	2000007c 	.word	0x2000007c
 8004658:	14f8b589 	.word	0x14f8b589

0800465c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466c:	e048      	b.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d044      	beq.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fd fcbb 	bl	8001ff0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d139      	bne.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10d      	bne.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	43da      	mvns	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	e00c      	b.n	80046cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	43da      	mvns	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4013      	ands	r3, r2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d116      	bne.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e023      	b.n	8004748 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d10d      	bne.n	8004726 <I2C_WaitOnFlagUntilTimeout+0xca>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	43da      	mvns	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	e00c      	b.n	8004740 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	43da      	mvns	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	429a      	cmp	r2, r3
 8004744:	d093      	beq.n	800466e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800475e:	e071      	b.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476e:	d123      	bne.n	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f043 0204 	orr.w	r2, r3, #4
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e067      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d041      	beq.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7fd fc16 	bl	8001ff0 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d136      	bne.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d10c      	bne.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	43da      	mvns	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4013      	ands	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bf14      	ite	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	2300      	moveq	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	e00b      	b.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	43da      	mvns	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e021      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	0c1b      	lsrs	r3, r3, #16
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10c      	bne.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	43da      	mvns	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e00b      	b.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	43da      	mvns	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4013      	ands	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f47f af6d 	bne.w	8004760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489c:	e034      	b.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f8b8 	bl	8004a14 <I2C_IsAcknowledgeFailed>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e034      	b.n	8004918 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d028      	beq.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fd fb9b 	bl	8001ff0 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11d      	bne.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d016      	beq.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e007      	b.n	8004918 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d1c3      	bne.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800492c:	e034      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f870 	bl	8004a14 <I2C_IsAcknowledgeFailed>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e034      	b.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d028      	beq.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fd fb53 	bl	8001ff0 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11d      	bne.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d016      	beq.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e007      	b.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d1c3      	bne.n	800492e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	08db      	lsrs	r3, r3, #3
 80049c2:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	0a1a      	lsrs	r2, r3, #8
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e008      	b.n	8004a00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fc:	d0e9      	beq.n	80049d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2000007c 	.word	0x2000007c
 8004a10:	14f8b589 	.word	0x14f8b589

08004a14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	d11b      	bne.n	8004a64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f043 0204 	orr.w	r2, r3, #4
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a80:	d103      	bne.n	8004a8a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a88:	e007      	b.n	8004a9a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a92:	d102      	bne.n	8004a9a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2208      	movs	r2, #8
 8004a98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e26c      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8087 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac4:	4b92      	ldr	r3, [pc, #584]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d00c      	beq.n	8004aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ad0:	4b8f      	ldr	r3, [pc, #572]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d112      	bne.n	8004b02 <HAL_RCC_OscConfig+0x5e>
 8004adc:	4b8c      	ldr	r3, [pc, #560]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d10b      	bne.n	8004b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aea:	4b89      	ldr	r3, [pc, #548]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d06c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x12c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d168      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e246      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x76>
 8004b0c:	4b80      	ldr	r3, [pc, #512]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a7f      	ldr	r2, [pc, #508]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e02e      	b.n	8004b78 <HAL_RCC_OscConfig+0xd4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x98>
 8004b22:	4b7b      	ldr	r3, [pc, #492]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a7a      	ldr	r2, [pc, #488]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b78      	ldr	r3, [pc, #480]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a77      	ldr	r2, [pc, #476]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xd4>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0xbc>
 8004b46:	4b72      	ldr	r3, [pc, #456]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a71      	ldr	r2, [pc, #452]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b6f      	ldr	r3, [pc, #444]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a6e      	ldr	r2, [pc, #440]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xd4>
 8004b60:	4b6b      	ldr	r3, [pc, #428]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a6a      	ldr	r2, [pc, #424]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b68      	ldr	r3, [pc, #416]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a67      	ldr	r2, [pc, #412]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fd fa36 	bl	8001ff0 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fd fa32 	bl	8001ff0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e1fa      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b5d      	ldr	r3, [pc, #372]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xe4>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fa22 	bl	8001ff0 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fd fa1e 	bl	8001ff0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1e6      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x10c>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d063      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bde:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bea:	4b49      	ldr	r3, [pc, #292]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x18c>
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x176>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1ba      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4939      	ldr	r1, [pc, #228]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e03a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3e:	f7fd f9d7 	bl	8001ff0 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fd f9d3 	bl	8001ff0 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e19b      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4927      	ldr	r1, [pc, #156]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	e015      	b.n	8004ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <HAL_RCC_OscConfig+0x270>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fd f9b6 	bl	8001ff0 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fd f9b2 	bl	8001ff0 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e17a      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d03a      	beq.n	8004d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d019      	beq.n	8004cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc0:	f7fd f996 	bl	8001ff0 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc8:	f7fd f992 	bl	8001ff0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e15a      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	f000 facc 	bl	8005284 <RCC_Delay>
 8004cec:	e01c      	b.n	8004d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf4:	f7fd f97c 	bl	8001ff0 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfa:	e00f      	b.n	8004d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfc:	f7fd f978 	bl	8001ff0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d908      	bls.n	8004d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e140      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	42420000 	.word	0x42420000
 8004d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d1c:	4b9e      	ldr	r3, [pc, #632]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e9      	bne.n	8004cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80a6 	beq.w	8004e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b97      	ldr	r3, [pc, #604]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10d      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b94      	ldr	r3, [pc, #592]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	4a93      	ldr	r2, [pc, #588]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	61d3      	str	r3, [r2, #28]
 8004d52:	4b91      	ldr	r3, [pc, #580]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b8e      	ldr	r3, [pc, #568]	; (8004f9c <HAL_RCC_OscConfig+0x4f8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6e:	4b8b      	ldr	r3, [pc, #556]	; (8004f9c <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a8a      	ldr	r2, [pc, #552]	; (8004f9c <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fd f939 	bl	8001ff0 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fd f935 	bl	8001ff0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b64      	cmp	r3, #100	; 0x64
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0fd      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b81      	ldr	r3, [pc, #516]	; (8004f9c <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x312>
 8004da8:	4b7b      	ldr	r3, [pc, #492]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	4a7a      	ldr	r2, [pc, #488]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6213      	str	r3, [r2, #32]
 8004db4:	e02d      	b.n	8004e12 <HAL_RCC_OscConfig+0x36e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x334>
 8004dbe:	4b76      	ldr	r3, [pc, #472]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	4a75      	ldr	r2, [pc, #468]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6213      	str	r3, [r2, #32]
 8004dca:	4b73      	ldr	r3, [pc, #460]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	4a72      	ldr	r2, [pc, #456]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	6213      	str	r3, [r2, #32]
 8004dd6:	e01c      	b.n	8004e12 <HAL_RCC_OscConfig+0x36e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x356>
 8004de0:	4b6d      	ldr	r3, [pc, #436]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4a6c      	ldr	r2, [pc, #432]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	6213      	str	r3, [r2, #32]
 8004dec:	4b6a      	ldr	r3, [pc, #424]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	4a69      	ldr	r2, [pc, #420]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6213      	str	r3, [r2, #32]
 8004df8:	e00b      	b.n	8004e12 <HAL_RCC_OscConfig+0x36e>
 8004dfa:	4b67      	ldr	r3, [pc, #412]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	4a66      	ldr	r2, [pc, #408]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6213      	str	r3, [r2, #32]
 8004e06:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	4a63      	ldr	r2, [pc, #396]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd f8e9 	bl	8001ff0 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd f8e5 	bl	8001ff0 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0ab      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ee      	beq.n	8004e22 <HAL_RCC_OscConfig+0x37e>
 8004e44:	e014      	b.n	8004e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e46:	f7fd f8d3 	bl	8001ff0 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	e00a      	b.n	8004e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4e:	f7fd f8cf 	bl	8001ff0 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e095      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e64:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ee      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b48      	ldr	r3, [pc, #288]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	4a47      	ldr	r2, [pc, #284]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 8081 	beq.w	8004f8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8c:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d061      	beq.n	8004f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d146      	bne.n	8004f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea0:	4b3f      	ldr	r3, [pc, #252]	; (8004fa0 <HAL_RCC_OscConfig+0x4fc>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7fd f8a3 	bl	8001ff0 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fd f89f 	bl	8001ff0 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e067      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec0:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ed6:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	492d      	ldr	r1, [pc, #180]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a19      	ldr	r1, [r3, #32]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	4927      	ldr	r1, [pc, #156]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCC_OscConfig+0x4fc>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fd f873 	bl	8001ff0 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd f86f 	bl	8001ff0 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e037      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f20:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x46a>
 8004f2c:	e02f      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <HAL_RCC_OscConfig+0x4fc>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd f85c 	bl	8001ff0 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fd f858 	bl	8001ff0 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e020      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x498>
 8004f5a:	e018      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e013      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	42420060 	.word	0x42420060

08004fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0d0      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d910      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b67      	ldr	r3, [pc, #412]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 0207 	bic.w	r2, r3, #7
 8004fce:	4965      	ldr	r1, [pc, #404]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b63      	ldr	r3, [pc, #396]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0b8      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b59      	ldr	r3, [pc, #356]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4a58      	ldr	r2, [pc, #352]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800500a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005018:	4b53      	ldr	r3, [pc, #332]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a52      	ldr	r2, [pc, #328]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b50      	ldr	r3, [pc, #320]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	494d      	ldr	r1, [pc, #308]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d040      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d115      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07f      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005062:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e073      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005072:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e06b      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005082:	4b39      	ldr	r3, [pc, #228]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4936      	ldr	r1, [pc, #216]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005094:	f7fc ffac 	bl	8001ff0 <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509c:	f7fc ffa8 	bl	8001ff0 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e053      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 020c 	and.w	r2, r3, #12
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1eb      	bne.n	800509c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d210      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 0207 	bic.w	r2, r3, #7
 80050da:	4922      	ldr	r1, [pc, #136]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e032      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4916      	ldr	r1, [pc, #88]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	490e      	ldr	r1, [pc, #56]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800512e:	4313      	orrs	r3, r2
 8005130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005132:	f000 f821 	bl	8005178 <HAL_RCC_GetSysClockFreq>
 8005136:	4602      	mov	r2, r0
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	490a      	ldr	r1, [pc, #40]	; (800516c <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	5ccb      	ldrb	r3, [r1, r3]
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <HAL_RCC_ClockConfig+0x1cc>)
 800514c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_ClockConfig+0x1d0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc ff0a 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40022000 	.word	0x40022000
 8005168:	40021000 	.word	0x40021000
 800516c:	08006580 	.word	0x08006580
 8005170:	2000007c 	.word	0x2000007c
 8005174:	2000008c 	.word	0x2000008c

08005178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005192:	4b1e      	ldr	r3, [pc, #120]	; (800520c <HAL_RCC_GetSysClockFreq+0x94>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d002      	beq.n	80051a8 <HAL_RCC_GetSysClockFreq+0x30>
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d003      	beq.n	80051ae <HAL_RCC_GetSysClockFreq+0x36>
 80051a6:	e027      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <HAL_RCC_GetSysClockFreq+0x98>)
 80051aa:	613b      	str	r3, [r7, #16]
      break;
 80051ac:	e027      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	0c9b      	lsrs	r3, r3, #18
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	4a17      	ldr	r2, [pc, #92]	; (8005214 <HAL_RCC_GetSysClockFreq+0x9c>)
 80051b8:	5cd3      	ldrb	r3, [r2, r3]
 80051ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d010      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051c6:	4b11      	ldr	r3, [pc, #68]	; (800520c <HAL_RCC_GetSysClockFreq+0x94>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	0c5b      	lsrs	r3, r3, #17
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	4a11      	ldr	r2, [pc, #68]	; (8005218 <HAL_RCC_GetSysClockFreq+0xa0>)
 80051d2:	5cd3      	ldrb	r3, [r2, r3]
 80051d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <HAL_RCC_GetSysClockFreq+0x98>)
 80051da:	fb02 f203 	mul.w	r2, r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e004      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0c      	ldr	r2, [pc, #48]	; (800521c <HAL_RCC_GetSysClockFreq+0xa4>)
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	613b      	str	r3, [r7, #16]
      break;
 80051f6:	e002      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCC_GetSysClockFreq+0x98>)
 80051fa:	613b      	str	r3, [r7, #16]
      break;
 80051fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fe:	693b      	ldr	r3, [r7, #16]
}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000
 8005210:	007a1200 	.word	0x007a1200
 8005214:	08006598 	.word	0x08006598
 8005218:	080065a8 	.word	0x080065a8
 800521c:	003d0900 	.word	0x003d0900

08005220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005224:	4b02      	ldr	r3, [pc, #8]	; (8005230 <HAL_RCC_GetHCLKFreq+0x10>)
 8005226:	681b      	ldr	r3, [r3, #0]
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr
 8005230:	2000007c 	.word	0x2000007c

08005234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005238:	f7ff fff2 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	0a1b      	lsrs	r3, r3, #8
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4903      	ldr	r1, [pc, #12]	; (8005258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000
 8005258:	08006590 	.word	0x08006590

0800525c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005260:	f7ff ffde 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	0adb      	lsrs	r3, r3, #11
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	4903      	ldr	r1, [pc, #12]	; (8005280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000
 8005280:	08006590 	.word	0x08006590

08005284 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <RCC_Delay+0x34>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <RCC_Delay+0x38>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	0a5b      	lsrs	r3, r3, #9
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052a0:	bf00      	nop
  }
  while (Delay --);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e5a      	subs	r2, r3, #1
 80052a6:	60fa      	str	r2, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f9      	bne.n	80052a0 <RCC_Delay+0x1c>
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	2000007c 	.word	0x2000007c
 80052bc:	10624dd3 	.word	0x10624dd3

080052c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e041      	b.n	8005356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fa0e 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 fa5c 	bl	80057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e03a      	b.n	80053ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <HAL_TIM_Base_Start_IT+0x98>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x58>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d009      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x58>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <HAL_TIM_Base_Start_IT+0x9c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x58>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <HAL_TIM_Base_Start_IT+0xa0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d111      	bne.n	80053dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d010      	beq.n	80053ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	e007      	b.n	80053ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800

08005404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d020      	beq.n	8005468 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01b      	beq.n	8005468 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0202 	mvn.w	r2, #2
 8005438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f998 	bl	8005784 <HAL_TIM_IC_CaptureCallback>
 8005454:	e005      	b.n	8005462 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f98b 	bl	8005772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f99a 	bl	8005796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d020      	beq.n	80054b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01b      	beq.n	80054b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0204 	mvn.w	r2, #4
 8005484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f972 	bl	8005784 <HAL_TIM_IC_CaptureCallback>
 80054a0:	e005      	b.n	80054ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f965 	bl	8005772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f974 	bl	8005796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d020      	beq.n	8005500 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01b      	beq.n	8005500 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0208 	mvn.w	r2, #8
 80054d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2204      	movs	r2, #4
 80054d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f94c 	bl	8005784 <HAL_TIM_IC_CaptureCallback>
 80054ec:	e005      	b.n	80054fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f93f 	bl	8005772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f94e 	bl	8005796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	d020      	beq.n	800554c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0210 	mvn.w	r2, #16
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2208      	movs	r2, #8
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f926 	bl	8005784 <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f919 	bl	8005772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f928 	bl	8005796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0201 	mvn.w	r2, #1
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fb fdee 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa7f 	bl	8005a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00c      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f8f8 	bl	80057a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0220 	mvn.w	r2, #32
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa52 	bl	8005a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_TIM_ConfigClockSource+0x1c>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e0b4      	b.n	800576a <HAL_TIM_ConfigClockSource+0x186>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800561e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005638:	d03e      	beq.n	80056b8 <HAL_TIM_ConfigClockSource+0xd4>
 800563a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563e:	f200 8087 	bhi.w	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005646:	f000 8086 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x172>
 800564a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564e:	d87f      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005650:	2b70      	cmp	r3, #112	; 0x70
 8005652:	d01a      	beq.n	800568a <HAL_TIM_ConfigClockSource+0xa6>
 8005654:	2b70      	cmp	r3, #112	; 0x70
 8005656:	d87b      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005658:	2b60      	cmp	r3, #96	; 0x60
 800565a:	d050      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x11a>
 800565c:	2b60      	cmp	r3, #96	; 0x60
 800565e:	d877      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b50      	cmp	r3, #80	; 0x50
 8005662:	d03c      	beq.n	80056de <HAL_TIM_ConfigClockSource+0xfa>
 8005664:	2b50      	cmp	r3, #80	; 0x50
 8005666:	d873      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d058      	beq.n	800571e <HAL_TIM_ConfigClockSource+0x13a>
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d86f      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b30      	cmp	r3, #48	; 0x30
 8005672:	d064      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005674:	2b30      	cmp	r3, #48	; 0x30
 8005676:	d86b      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d060      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d867      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d05c      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	2b10      	cmp	r3, #16
 8005686:	d05a      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005688:	e062      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6899      	ldr	r1, [r3, #8]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f000 f974 	bl	8005986 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	609a      	str	r2, [r3, #8]
      break;
 80056b6:	e04f      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f000 f95d 	bl	8005986 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056da:	609a      	str	r2, [r3, #8]
      break;
 80056dc:	e03c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f000 f8d4 	bl	8005898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2150      	movs	r1, #80	; 0x50
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f92b 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 80056fc:	e02c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	461a      	mov	r2, r3
 800570c:	f000 f8f2 	bl	80058f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2160      	movs	r1, #96	; 0x60
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f91b 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800571c:	e01c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	461a      	mov	r2, r3
 800572c:	f000 f8b4 	bl	8005898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2140      	movs	r1, #64	; 0x40
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f90b 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800573c:	e00c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f000 f902 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800574e:	e003      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e000      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr
	...

080057bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a2f      	ldr	r2, [pc, #188]	; (800588c <TIM_Base_SetConfig+0xd0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_Base_SetConfig+0x30>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d007      	beq.n	80057ec <TIM_Base_SetConfig+0x30>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a2c      	ldr	r2, [pc, #176]	; (8005890 <TIM_Base_SetConfig+0xd4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0x30>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <TIM_Base_SetConfig+0xd8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d108      	bne.n	80057fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a22      	ldr	r2, [pc, #136]	; (800588c <TIM_Base_SetConfig+0xd0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_Base_SetConfig+0x62>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580c:	d007      	beq.n	800581e <TIM_Base_SetConfig+0x62>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <TIM_Base_SetConfig+0xd4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_Base_SetConfig+0x62>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <TIM_Base_SetConfig+0xd8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d108      	bne.n	8005830 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0d      	ldr	r2, [pc, #52]	; (800588c <TIM_Base_SetConfig+0xd0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d103      	bne.n	8005864 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]
  }
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800

08005898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 030a 	bic.w	r3, r3, #10
 80058d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f023 0210 	bic.w	r2, r3, #16
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800591e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	031b      	lsls	r3, r3, #12
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005930:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	f043 0307 	orr.w	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	021a      	lsls	r2, r3, #8
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	609a      	str	r2, [r3, #8]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e046      	b.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a28:	d009      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d10c      	bne.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800

08005a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e042      	b.n	8005b3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb fe40 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	; 0x24
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f82b 	bl	8005b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695a      	ldr	r2, [r3, #20]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b7e:	f023 030c 	bic.w	r3, r3, #12
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <UART_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d103      	bne.n	8005bb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bac:	f7ff fb56 	bl	800525c <HAL_RCC_GetPCLK2Freq>
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	e002      	b.n	8005bba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bb4:	f7ff fb3e 	bl	8005234 <HAL_RCC_GetPCLK1Freq>
 8005bb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009a      	lsls	r2, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	4a22      	ldr	r2, [pc, #136]	; (8005c5c <UART_SetConfig+0x118>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	0119      	lsls	r1, r3, #4
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009a      	lsls	r2, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf0:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <UART_SetConfig+0x118>)
 8005bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	2064      	movs	r0, #100	; 0x64
 8005bfa:	fb00 f303 	mul.w	r3, r0, r3
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	3332      	adds	r3, #50	; 0x32
 8005c04:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <UART_SetConfig+0x118>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c10:	4419      	add	r1, r3
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009a      	lsls	r2, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c28:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <UART_SetConfig+0x118>)
 8005c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2064      	movs	r0, #100	; 0x64
 8005c32:	fb00 f303 	mul.w	r3, r0, r3
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	3332      	adds	r3, #50	; 0x32
 8005c3c:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <UART_SetConfig+0x118>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40013800 	.word	0x40013800
 8005c5c:	51eb851f 	.word	0x51eb851f

08005c60 <__errno>:
 8005c60:	4b01      	ldr	r3, [pc, #4]	; (8005c68 <__errno+0x8>)
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000094 	.word	0x20000094

08005c6c <__libc_init_array>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	2600      	movs	r6, #0
 8005c70:	4d0c      	ldr	r5, [pc, #48]	; (8005ca4 <__libc_init_array+0x38>)
 8005c72:	4c0d      	ldr	r4, [pc, #52]	; (8005ca8 <__libc_init_array+0x3c>)
 8005c74:	1b64      	subs	r4, r4, r5
 8005c76:	10a4      	asrs	r4, r4, #2
 8005c78:	42a6      	cmp	r6, r4
 8005c7a:	d109      	bne.n	8005c90 <__libc_init_array+0x24>
 8005c7c:	f000 fc70 	bl	8006560 <_init>
 8005c80:	2600      	movs	r6, #0
 8005c82:	4d0a      	ldr	r5, [pc, #40]	; (8005cac <__libc_init_array+0x40>)
 8005c84:	4c0a      	ldr	r4, [pc, #40]	; (8005cb0 <__libc_init_array+0x44>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	42a6      	cmp	r6, r4
 8005c8c:	d105      	bne.n	8005c9a <__libc_init_array+0x2e>
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c94:	4798      	blx	r3
 8005c96:	3601      	adds	r6, #1
 8005c98:	e7ee      	b.n	8005c78 <__libc_init_array+0xc>
 8005c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9e:	4798      	blx	r3
 8005ca0:	3601      	adds	r6, #1
 8005ca2:	e7f2      	b.n	8005c8a <__libc_init_array+0x1e>
 8005ca4:	080065e0 	.word	0x080065e0
 8005ca8:	080065e0 	.word	0x080065e0
 8005cac:	080065e0 	.word	0x080065e0
 8005cb0:	080065e4 	.word	0x080065e4

08005cb4 <memset>:
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4402      	add	r2, r0
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d100      	bne.n	8005cbe <memset+0xa>
 8005cbc:	4770      	bx	lr
 8005cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc2:	e7f9      	b.n	8005cb8 <memset+0x4>

08005cc4 <sniprintf>:
 8005cc4:	b40c      	push	{r2, r3}
 8005cc6:	b530      	push	{r4, r5, lr}
 8005cc8:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <sniprintf+0x64>)
 8005cca:	1e0c      	subs	r4, r1, #0
 8005ccc:	681d      	ldr	r5, [r3, #0]
 8005cce:	b09d      	sub	sp, #116	; 0x74
 8005cd0:	da08      	bge.n	8005ce4 <sniprintf+0x20>
 8005cd2:	238b      	movs	r3, #139	; 0x8b
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	b01d      	add	sp, #116	; 0x74
 8005cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ce0:	b002      	add	sp, #8
 8005ce2:	4770      	bx	lr
 8005ce4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005ce8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cec:	bf0c      	ite	eq
 8005cee:	4623      	moveq	r3, r4
 8005cf0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	9307      	str	r3, [sp, #28]
 8005cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cfc:	9002      	str	r0, [sp, #8]
 8005cfe:	9006      	str	r0, [sp, #24]
 8005d00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d04:	4628      	mov	r0, r5
 8005d06:	ab21      	add	r3, sp, #132	; 0x84
 8005d08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d0a:	a902      	add	r1, sp, #8
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f000 f869 	bl	8005de4 <_svfiprintf_r>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	bfbc      	itt	lt
 8005d16:	238b      	movlt	r3, #139	; 0x8b
 8005d18:	602b      	strlt	r3, [r5, #0]
 8005d1a:	2c00      	cmp	r4, #0
 8005d1c:	d0dd      	beq.n	8005cda <sniprintf+0x16>
 8005d1e:	2200      	movs	r2, #0
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e7d9      	b.n	8005cda <sniprintf+0x16>
 8005d26:	bf00      	nop
 8005d28:	20000094 	.word	0x20000094

08005d2c <__ssputs_r>:
 8005d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	688e      	ldr	r6, [r1, #8]
 8005d32:	4682      	mov	sl, r0
 8005d34:	429e      	cmp	r6, r3
 8005d36:	460c      	mov	r4, r1
 8005d38:	4690      	mov	r8, r2
 8005d3a:	461f      	mov	r7, r3
 8005d3c:	d838      	bhi.n	8005db0 <__ssputs_r+0x84>
 8005d3e:	898a      	ldrh	r2, [r1, #12]
 8005d40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d44:	d032      	beq.n	8005dac <__ssputs_r+0x80>
 8005d46:	6825      	ldr	r5, [r4, #0]
 8005d48:	6909      	ldr	r1, [r1, #16]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	eba5 0901 	sub.w	r9, r5, r1
 8005d50:	6965      	ldr	r5, [r4, #20]
 8005d52:	444b      	add	r3, r9
 8005d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d5c:	106d      	asrs	r5, r5, #1
 8005d5e:	429d      	cmp	r5, r3
 8005d60:	bf38      	it	cc
 8005d62:	461d      	movcc	r5, r3
 8005d64:	0553      	lsls	r3, r2, #21
 8005d66:	d531      	bpl.n	8005dcc <__ssputs_r+0xa0>
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f000 fb53 	bl	8006414 <_malloc_r>
 8005d6e:	4606      	mov	r6, r0
 8005d70:	b950      	cbnz	r0, 8005d88 <__ssputs_r+0x5c>
 8005d72:	230c      	movs	r3, #12
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	f8ca 3000 	str.w	r3, [sl]
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d88:	464a      	mov	r2, r9
 8005d8a:	6921      	ldr	r1, [r4, #16]
 8005d8c:	f000 face 	bl	800632c <memcpy>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	6126      	str	r6, [r4, #16]
 8005d9e:	444e      	add	r6, r9
 8005da0:	6026      	str	r6, [r4, #0]
 8005da2:	463e      	mov	r6, r7
 8005da4:	6165      	str	r5, [r4, #20]
 8005da6:	eba5 0509 	sub.w	r5, r5, r9
 8005daa:	60a5      	str	r5, [r4, #8]
 8005dac:	42be      	cmp	r6, r7
 8005dae:	d900      	bls.n	8005db2 <__ssputs_r+0x86>
 8005db0:	463e      	mov	r6, r7
 8005db2:	4632      	mov	r2, r6
 8005db4:	4641      	mov	r1, r8
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	f000 fac6 	bl	8006348 <memmove>
 8005dbc:	68a3      	ldr	r3, [r4, #8]
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	1b9b      	subs	r3, r3, r6
 8005dc2:	4432      	add	r2, r6
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	60a3      	str	r3, [r4, #8]
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	e7db      	b.n	8005d84 <__ssputs_r+0x58>
 8005dcc:	462a      	mov	r2, r5
 8005dce:	f000 fb7b 	bl	80064c8 <_realloc_r>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d1e1      	bne.n	8005d9c <__ssputs_r+0x70>
 8005dd8:	4650      	mov	r0, sl
 8005dda:	6921      	ldr	r1, [r4, #16]
 8005ddc:	f000 face 	bl	800637c <_free_r>
 8005de0:	e7c7      	b.n	8005d72 <__ssputs_r+0x46>
	...

08005de4 <_svfiprintf_r>:
 8005de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de8:	4698      	mov	r8, r3
 8005dea:	898b      	ldrh	r3, [r1, #12]
 8005dec:	4607      	mov	r7, r0
 8005dee:	061b      	lsls	r3, r3, #24
 8005df0:	460d      	mov	r5, r1
 8005df2:	4614      	mov	r4, r2
 8005df4:	b09d      	sub	sp, #116	; 0x74
 8005df6:	d50e      	bpl.n	8005e16 <_svfiprintf_r+0x32>
 8005df8:	690b      	ldr	r3, [r1, #16]
 8005dfa:	b963      	cbnz	r3, 8005e16 <_svfiprintf_r+0x32>
 8005dfc:	2140      	movs	r1, #64	; 0x40
 8005dfe:	f000 fb09 	bl	8006414 <_malloc_r>
 8005e02:	6028      	str	r0, [r5, #0]
 8005e04:	6128      	str	r0, [r5, #16]
 8005e06:	b920      	cbnz	r0, 8005e12 <_svfiprintf_r+0x2e>
 8005e08:	230c      	movs	r3, #12
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	e0d1      	b.n	8005fb6 <_svfiprintf_r+0x1d2>
 8005e12:	2340      	movs	r3, #64	; 0x40
 8005e14:	616b      	str	r3, [r5, #20]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e20:	2330      	movs	r3, #48	; 0x30
 8005e22:	f04f 0901 	mov.w	r9, #1
 8005e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005fd0 <_svfiprintf_r+0x1ec>
 8005e2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e32:	4623      	mov	r3, r4
 8005e34:	469a      	mov	sl, r3
 8005e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e3a:	b10a      	cbz	r2, 8005e40 <_svfiprintf_r+0x5c>
 8005e3c:	2a25      	cmp	r2, #37	; 0x25
 8005e3e:	d1f9      	bne.n	8005e34 <_svfiprintf_r+0x50>
 8005e40:	ebba 0b04 	subs.w	fp, sl, r4
 8005e44:	d00b      	beq.n	8005e5e <_svfiprintf_r+0x7a>
 8005e46:	465b      	mov	r3, fp
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	f7ff ff6d 	bl	8005d2c <__ssputs_r>
 8005e52:	3001      	adds	r0, #1
 8005e54:	f000 80aa 	beq.w	8005fac <_svfiprintf_r+0x1c8>
 8005e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e5a:	445a      	add	r2, fp
 8005e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 80a2 	beq.w	8005fac <_svfiprintf_r+0x1c8>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e72:	f10a 0a01 	add.w	sl, sl, #1
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	9307      	str	r3, [sp, #28]
 8005e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e80:	4654      	mov	r4, sl
 8005e82:	2205      	movs	r2, #5
 8005e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e88:	4851      	ldr	r0, [pc, #324]	; (8005fd0 <_svfiprintf_r+0x1ec>)
 8005e8a:	f000 fa41 	bl	8006310 <memchr>
 8005e8e:	9a04      	ldr	r2, [sp, #16]
 8005e90:	b9d8      	cbnz	r0, 8005eca <_svfiprintf_r+0xe6>
 8005e92:	06d0      	lsls	r0, r2, #27
 8005e94:	bf44      	itt	mi
 8005e96:	2320      	movmi	r3, #32
 8005e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e9c:	0711      	lsls	r1, r2, #28
 8005e9e:	bf44      	itt	mi
 8005ea0:	232b      	movmi	r3, #43	; 0x2b
 8005ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8005eac:	d015      	beq.n	8005eda <_svfiprintf_r+0xf6>
 8005eae:	4654      	mov	r4, sl
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	f04f 0c0a 	mov.w	ip, #10
 8005eb6:	9a07      	ldr	r2, [sp, #28]
 8005eb8:	4621      	mov	r1, r4
 8005eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ebe:	3b30      	subs	r3, #48	; 0x30
 8005ec0:	2b09      	cmp	r3, #9
 8005ec2:	d94e      	bls.n	8005f62 <_svfiprintf_r+0x17e>
 8005ec4:	b1b0      	cbz	r0, 8005ef4 <_svfiprintf_r+0x110>
 8005ec6:	9207      	str	r2, [sp, #28]
 8005ec8:	e014      	b.n	8005ef4 <_svfiprintf_r+0x110>
 8005eca:	eba0 0308 	sub.w	r3, r0, r8
 8005ece:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	46a2      	mov	sl, r4
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	e7d2      	b.n	8005e80 <_svfiprintf_r+0x9c>
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	1d19      	adds	r1, r3, #4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	9103      	str	r1, [sp, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bfbb      	ittet	lt
 8005ee6:	425b      	neglt	r3, r3
 8005ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8005eec:	9307      	strge	r3, [sp, #28]
 8005eee:	9307      	strlt	r3, [sp, #28]
 8005ef0:	bfb8      	it	lt
 8005ef2:	9204      	strlt	r2, [sp, #16]
 8005ef4:	7823      	ldrb	r3, [r4, #0]
 8005ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ef8:	d10c      	bne.n	8005f14 <_svfiprintf_r+0x130>
 8005efa:	7863      	ldrb	r3, [r4, #1]
 8005efc:	2b2a      	cmp	r3, #42	; 0x2a
 8005efe:	d135      	bne.n	8005f6c <_svfiprintf_r+0x188>
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	3402      	adds	r4, #2
 8005f04:	1d1a      	adds	r2, r3, #4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	9203      	str	r2, [sp, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bfb8      	it	lt
 8005f0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f12:	9305      	str	r3, [sp, #20]
 8005f14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fe0 <_svfiprintf_r+0x1fc>
 8005f18:	2203      	movs	r2, #3
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	7821      	ldrb	r1, [r4, #0]
 8005f1e:	f000 f9f7 	bl	8006310 <memchr>
 8005f22:	b140      	cbz	r0, 8005f36 <_svfiprintf_r+0x152>
 8005f24:	2340      	movs	r3, #64	; 0x40
 8005f26:	eba0 000a 	sub.w	r0, r0, sl
 8005f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	3401      	adds	r4, #1
 8005f32:	4303      	orrs	r3, r0
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3a:	2206      	movs	r2, #6
 8005f3c:	4825      	ldr	r0, [pc, #148]	; (8005fd4 <_svfiprintf_r+0x1f0>)
 8005f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f42:	f000 f9e5 	bl	8006310 <memchr>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d038      	beq.n	8005fbc <_svfiprintf_r+0x1d8>
 8005f4a:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <_svfiprintf_r+0x1f4>)
 8005f4c:	bb1b      	cbnz	r3, 8005f96 <_svfiprintf_r+0x1b2>
 8005f4e:	9b03      	ldr	r3, [sp, #12]
 8005f50:	3307      	adds	r3, #7
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	3308      	adds	r3, #8
 8005f58:	9303      	str	r3, [sp, #12]
 8005f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5c:	4433      	add	r3, r6
 8005f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f60:	e767      	b.n	8005e32 <_svfiprintf_r+0x4e>
 8005f62:	460c      	mov	r4, r1
 8005f64:	2001      	movs	r0, #1
 8005f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f6a:	e7a5      	b.n	8005eb8 <_svfiprintf_r+0xd4>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f04f 0c0a 	mov.w	ip, #10
 8005f72:	4619      	mov	r1, r3
 8005f74:	3401      	adds	r4, #1
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f7e:	3a30      	subs	r2, #48	; 0x30
 8005f80:	2a09      	cmp	r2, #9
 8005f82:	d903      	bls.n	8005f8c <_svfiprintf_r+0x1a8>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0c5      	beq.n	8005f14 <_svfiprintf_r+0x130>
 8005f88:	9105      	str	r1, [sp, #20]
 8005f8a:	e7c3      	b.n	8005f14 <_svfiprintf_r+0x130>
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	2301      	movs	r3, #1
 8005f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f94:	e7f0      	b.n	8005f78 <_svfiprintf_r+0x194>
 8005f96:	ab03      	add	r3, sp, #12
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	462a      	mov	r2, r5
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <_svfiprintf_r+0x1f8>)
 8005fa0:	a904      	add	r1, sp, #16
 8005fa2:	f3af 8000 	nop.w
 8005fa6:	1c42      	adds	r2, r0, #1
 8005fa8:	4606      	mov	r6, r0
 8005faa:	d1d6      	bne.n	8005f5a <_svfiprintf_r+0x176>
 8005fac:	89ab      	ldrh	r3, [r5, #12]
 8005fae:	065b      	lsls	r3, r3, #25
 8005fb0:	f53f af2c 	bmi.w	8005e0c <_svfiprintf_r+0x28>
 8005fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fb6:	b01d      	add	sp, #116	; 0x74
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	ab03      	add	r3, sp, #12
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <_svfiprintf_r+0x1f8>)
 8005fc6:	a904      	add	r1, sp, #16
 8005fc8:	f000 f87c 	bl	80060c4 <_printf_i>
 8005fcc:	e7eb      	b.n	8005fa6 <_svfiprintf_r+0x1c2>
 8005fce:	bf00      	nop
 8005fd0:	080065aa 	.word	0x080065aa
 8005fd4:	080065b4 	.word	0x080065b4
 8005fd8:	00000000 	.word	0x00000000
 8005fdc:	08005d2d 	.word	0x08005d2d
 8005fe0:	080065b0 	.word	0x080065b0

08005fe4 <_printf_common>:
 8005fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	4616      	mov	r6, r2
 8005fea:	4699      	mov	r9, r3
 8005fec:	688a      	ldr	r2, [r1, #8]
 8005fee:	690b      	ldr	r3, [r1, #16]
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	bfb8      	it	lt
 8005ff6:	4613      	movlt	r3, r2
 8005ff8:	6033      	str	r3, [r6, #0]
 8005ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ffe:	460c      	mov	r4, r1
 8006000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006004:	b10a      	cbz	r2, 800600a <_printf_common+0x26>
 8006006:	3301      	adds	r3, #1
 8006008:	6033      	str	r3, [r6, #0]
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	0699      	lsls	r1, r3, #26
 800600e:	bf42      	ittt	mi
 8006010:	6833      	ldrmi	r3, [r6, #0]
 8006012:	3302      	addmi	r3, #2
 8006014:	6033      	strmi	r3, [r6, #0]
 8006016:	6825      	ldr	r5, [r4, #0]
 8006018:	f015 0506 	ands.w	r5, r5, #6
 800601c:	d106      	bne.n	800602c <_printf_common+0x48>
 800601e:	f104 0a19 	add.w	sl, r4, #25
 8006022:	68e3      	ldr	r3, [r4, #12]
 8006024:	6832      	ldr	r2, [r6, #0]
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	42ab      	cmp	r3, r5
 800602a:	dc28      	bgt.n	800607e <_printf_common+0x9a>
 800602c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006030:	1e13      	subs	r3, r2, #0
 8006032:	6822      	ldr	r2, [r4, #0]
 8006034:	bf18      	it	ne
 8006036:	2301      	movne	r3, #1
 8006038:	0692      	lsls	r2, r2, #26
 800603a:	d42d      	bmi.n	8006098 <_printf_common+0xb4>
 800603c:	4649      	mov	r1, r9
 800603e:	4638      	mov	r0, r7
 8006040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006044:	47c0      	blx	r8
 8006046:	3001      	adds	r0, #1
 8006048:	d020      	beq.n	800608c <_printf_common+0xa8>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	68e5      	ldr	r5, [r4, #12]
 800604e:	f003 0306 	and.w	r3, r3, #6
 8006052:	2b04      	cmp	r3, #4
 8006054:	bf18      	it	ne
 8006056:	2500      	movne	r5, #0
 8006058:	6832      	ldr	r2, [r6, #0]
 800605a:	f04f 0600 	mov.w	r6, #0
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	bf08      	it	eq
 8006062:	1aad      	subeq	r5, r5, r2
 8006064:	6922      	ldr	r2, [r4, #16]
 8006066:	bf08      	it	eq
 8006068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800606c:	4293      	cmp	r3, r2
 800606e:	bfc4      	itt	gt
 8006070:	1a9b      	subgt	r3, r3, r2
 8006072:	18ed      	addgt	r5, r5, r3
 8006074:	341a      	adds	r4, #26
 8006076:	42b5      	cmp	r5, r6
 8006078:	d11a      	bne.n	80060b0 <_printf_common+0xcc>
 800607a:	2000      	movs	r0, #0
 800607c:	e008      	b.n	8006090 <_printf_common+0xac>
 800607e:	2301      	movs	r3, #1
 8006080:	4652      	mov	r2, sl
 8006082:	4649      	mov	r1, r9
 8006084:	4638      	mov	r0, r7
 8006086:	47c0      	blx	r8
 8006088:	3001      	adds	r0, #1
 800608a:	d103      	bne.n	8006094 <_printf_common+0xb0>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006094:	3501      	adds	r5, #1
 8006096:	e7c4      	b.n	8006022 <_printf_common+0x3e>
 8006098:	2030      	movs	r0, #48	; 0x30
 800609a:	18e1      	adds	r1, r4, r3
 800609c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a6:	4422      	add	r2, r4
 80060a8:	3302      	adds	r3, #2
 80060aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060ae:	e7c5      	b.n	800603c <_printf_common+0x58>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4622      	mov	r2, r4
 80060b4:	4649      	mov	r1, r9
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d0e6      	beq.n	800608c <_printf_common+0xa8>
 80060be:	3601      	adds	r6, #1
 80060c0:	e7d9      	b.n	8006076 <_printf_common+0x92>
	...

080060c4 <_printf_i>:
 80060c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	460c      	mov	r4, r1
 80060ca:	7e27      	ldrb	r7, [r4, #24]
 80060cc:	4691      	mov	r9, r2
 80060ce:	2f78      	cmp	r7, #120	; 0x78
 80060d0:	4680      	mov	r8, r0
 80060d2:	469a      	mov	sl, r3
 80060d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060da:	d807      	bhi.n	80060ec <_printf_i+0x28>
 80060dc:	2f62      	cmp	r7, #98	; 0x62
 80060de:	d80a      	bhi.n	80060f6 <_printf_i+0x32>
 80060e0:	2f00      	cmp	r7, #0
 80060e2:	f000 80d9 	beq.w	8006298 <_printf_i+0x1d4>
 80060e6:	2f58      	cmp	r7, #88	; 0x58
 80060e8:	f000 80a4 	beq.w	8006234 <_printf_i+0x170>
 80060ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f4:	e03a      	b.n	800616c <_printf_i+0xa8>
 80060f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060fa:	2b15      	cmp	r3, #21
 80060fc:	d8f6      	bhi.n	80060ec <_printf_i+0x28>
 80060fe:	a001      	add	r0, pc, #4	; (adr r0, 8006104 <_printf_i+0x40>)
 8006100:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006104:	0800615d 	.word	0x0800615d
 8006108:	08006171 	.word	0x08006171
 800610c:	080060ed 	.word	0x080060ed
 8006110:	080060ed 	.word	0x080060ed
 8006114:	080060ed 	.word	0x080060ed
 8006118:	080060ed 	.word	0x080060ed
 800611c:	08006171 	.word	0x08006171
 8006120:	080060ed 	.word	0x080060ed
 8006124:	080060ed 	.word	0x080060ed
 8006128:	080060ed 	.word	0x080060ed
 800612c:	080060ed 	.word	0x080060ed
 8006130:	0800627f 	.word	0x0800627f
 8006134:	080061a1 	.word	0x080061a1
 8006138:	08006261 	.word	0x08006261
 800613c:	080060ed 	.word	0x080060ed
 8006140:	080060ed 	.word	0x080060ed
 8006144:	080062a1 	.word	0x080062a1
 8006148:	080060ed 	.word	0x080060ed
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080060ed 	.word	0x080060ed
 8006154:	080060ed 	.word	0x080060ed
 8006158:	08006269 	.word	0x08006269
 800615c:	680b      	ldr	r3, [r1, #0]
 800615e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	600a      	str	r2, [r1, #0]
 8006168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800616c:	2301      	movs	r3, #1
 800616e:	e0a4      	b.n	80062ba <_printf_i+0x1f6>
 8006170:	6825      	ldr	r5, [r4, #0]
 8006172:	6808      	ldr	r0, [r1, #0]
 8006174:	062e      	lsls	r6, r5, #24
 8006176:	f100 0304 	add.w	r3, r0, #4
 800617a:	d50a      	bpl.n	8006192 <_printf_i+0xce>
 800617c:	6805      	ldr	r5, [r0, #0]
 800617e:	600b      	str	r3, [r1, #0]
 8006180:	2d00      	cmp	r5, #0
 8006182:	da03      	bge.n	800618c <_printf_i+0xc8>
 8006184:	232d      	movs	r3, #45	; 0x2d
 8006186:	426d      	negs	r5, r5
 8006188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800618c:	230a      	movs	r3, #10
 800618e:	485e      	ldr	r0, [pc, #376]	; (8006308 <_printf_i+0x244>)
 8006190:	e019      	b.n	80061c6 <_printf_i+0x102>
 8006192:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006196:	6805      	ldr	r5, [r0, #0]
 8006198:	600b      	str	r3, [r1, #0]
 800619a:	bf18      	it	ne
 800619c:	b22d      	sxthne	r5, r5
 800619e:	e7ef      	b.n	8006180 <_printf_i+0xbc>
 80061a0:	680b      	ldr	r3, [r1, #0]
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	1d18      	adds	r0, r3, #4
 80061a6:	6008      	str	r0, [r1, #0]
 80061a8:	0628      	lsls	r0, r5, #24
 80061aa:	d501      	bpl.n	80061b0 <_printf_i+0xec>
 80061ac:	681d      	ldr	r5, [r3, #0]
 80061ae:	e002      	b.n	80061b6 <_printf_i+0xf2>
 80061b0:	0669      	lsls	r1, r5, #25
 80061b2:	d5fb      	bpl.n	80061ac <_printf_i+0xe8>
 80061b4:	881d      	ldrh	r5, [r3, #0]
 80061b6:	2f6f      	cmp	r7, #111	; 0x6f
 80061b8:	bf0c      	ite	eq
 80061ba:	2308      	moveq	r3, #8
 80061bc:	230a      	movne	r3, #10
 80061be:	4852      	ldr	r0, [pc, #328]	; (8006308 <_printf_i+0x244>)
 80061c0:	2100      	movs	r1, #0
 80061c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c6:	6866      	ldr	r6, [r4, #4]
 80061c8:	2e00      	cmp	r6, #0
 80061ca:	bfa8      	it	ge
 80061cc:	6821      	ldrge	r1, [r4, #0]
 80061ce:	60a6      	str	r6, [r4, #8]
 80061d0:	bfa4      	itt	ge
 80061d2:	f021 0104 	bicge.w	r1, r1, #4
 80061d6:	6021      	strge	r1, [r4, #0]
 80061d8:	b90d      	cbnz	r5, 80061de <_printf_i+0x11a>
 80061da:	2e00      	cmp	r6, #0
 80061dc:	d04d      	beq.n	800627a <_printf_i+0x1b6>
 80061de:	4616      	mov	r6, r2
 80061e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80061e4:	fb03 5711 	mls	r7, r3, r1, r5
 80061e8:	5dc7      	ldrb	r7, [r0, r7]
 80061ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ee:	462f      	mov	r7, r5
 80061f0:	42bb      	cmp	r3, r7
 80061f2:	460d      	mov	r5, r1
 80061f4:	d9f4      	bls.n	80061e0 <_printf_i+0x11c>
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d10b      	bne.n	8006212 <_printf_i+0x14e>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	07df      	lsls	r7, r3, #31
 80061fe:	d508      	bpl.n	8006212 <_printf_i+0x14e>
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	6861      	ldr	r1, [r4, #4]
 8006204:	4299      	cmp	r1, r3
 8006206:	bfde      	ittt	le
 8006208:	2330      	movle	r3, #48	; 0x30
 800620a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800620e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006212:	1b92      	subs	r2, r2, r6
 8006214:	6122      	str	r2, [r4, #16]
 8006216:	464b      	mov	r3, r9
 8006218:	4621      	mov	r1, r4
 800621a:	4640      	mov	r0, r8
 800621c:	f8cd a000 	str.w	sl, [sp]
 8006220:	aa03      	add	r2, sp, #12
 8006222:	f7ff fedf 	bl	8005fe4 <_printf_common>
 8006226:	3001      	adds	r0, #1
 8006228:	d14c      	bne.n	80062c4 <_printf_i+0x200>
 800622a:	f04f 30ff 	mov.w	r0, #4294967295
 800622e:	b004      	add	sp, #16
 8006230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006234:	4834      	ldr	r0, [pc, #208]	; (8006308 <_printf_i+0x244>)
 8006236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800623a:	680e      	ldr	r6, [r1, #0]
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006242:	061f      	lsls	r7, r3, #24
 8006244:	600e      	str	r6, [r1, #0]
 8006246:	d514      	bpl.n	8006272 <_printf_i+0x1ae>
 8006248:	07d9      	lsls	r1, r3, #31
 800624a:	bf44      	itt	mi
 800624c:	f043 0320 	orrmi.w	r3, r3, #32
 8006250:	6023      	strmi	r3, [r4, #0]
 8006252:	b91d      	cbnz	r5, 800625c <_printf_i+0x198>
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	f023 0320 	bic.w	r3, r3, #32
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	2310      	movs	r3, #16
 800625e:	e7af      	b.n	80061c0 <_printf_i+0xfc>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	f043 0320 	orr.w	r3, r3, #32
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	2378      	movs	r3, #120	; 0x78
 800626a:	4828      	ldr	r0, [pc, #160]	; (800630c <_printf_i+0x248>)
 800626c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006270:	e7e3      	b.n	800623a <_printf_i+0x176>
 8006272:	065e      	lsls	r6, r3, #25
 8006274:	bf48      	it	mi
 8006276:	b2ad      	uxthmi	r5, r5
 8006278:	e7e6      	b.n	8006248 <_printf_i+0x184>
 800627a:	4616      	mov	r6, r2
 800627c:	e7bb      	b.n	80061f6 <_printf_i+0x132>
 800627e:	680b      	ldr	r3, [r1, #0]
 8006280:	6826      	ldr	r6, [r4, #0]
 8006282:	1d1d      	adds	r5, r3, #4
 8006284:	6960      	ldr	r0, [r4, #20]
 8006286:	600d      	str	r5, [r1, #0]
 8006288:	0635      	lsls	r5, r6, #24
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	d501      	bpl.n	8006292 <_printf_i+0x1ce>
 800628e:	6018      	str	r0, [r3, #0]
 8006290:	e002      	b.n	8006298 <_printf_i+0x1d4>
 8006292:	0671      	lsls	r1, r6, #25
 8006294:	d5fb      	bpl.n	800628e <_printf_i+0x1ca>
 8006296:	8018      	strh	r0, [r3, #0]
 8006298:	2300      	movs	r3, #0
 800629a:	4616      	mov	r6, r2
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	e7ba      	b.n	8006216 <_printf_i+0x152>
 80062a0:	680b      	ldr	r3, [r1, #0]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	600a      	str	r2, [r1, #0]
 80062a6:	681e      	ldr	r6, [r3, #0]
 80062a8:	2100      	movs	r1, #0
 80062aa:	4630      	mov	r0, r6
 80062ac:	6862      	ldr	r2, [r4, #4]
 80062ae:	f000 f82f 	bl	8006310 <memchr>
 80062b2:	b108      	cbz	r0, 80062b8 <_printf_i+0x1f4>
 80062b4:	1b80      	subs	r0, r0, r6
 80062b6:	6060      	str	r0, [r4, #4]
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	6123      	str	r3, [r4, #16]
 80062bc:	2300      	movs	r3, #0
 80062be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c2:	e7a8      	b.n	8006216 <_printf_i+0x152>
 80062c4:	4632      	mov	r2, r6
 80062c6:	4649      	mov	r1, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	47d0      	blx	sl
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0ab      	beq.n	800622a <_printf_i+0x166>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	079b      	lsls	r3, r3, #30
 80062d6:	d413      	bmi.n	8006300 <_printf_i+0x23c>
 80062d8:	68e0      	ldr	r0, [r4, #12]
 80062da:	9b03      	ldr	r3, [sp, #12]
 80062dc:	4298      	cmp	r0, r3
 80062de:	bfb8      	it	lt
 80062e0:	4618      	movlt	r0, r3
 80062e2:	e7a4      	b.n	800622e <_printf_i+0x16a>
 80062e4:	2301      	movs	r3, #1
 80062e6:	4632      	mov	r2, r6
 80062e8:	4649      	mov	r1, r9
 80062ea:	4640      	mov	r0, r8
 80062ec:	47d0      	blx	sl
 80062ee:	3001      	adds	r0, #1
 80062f0:	d09b      	beq.n	800622a <_printf_i+0x166>
 80062f2:	3501      	adds	r5, #1
 80062f4:	68e3      	ldr	r3, [r4, #12]
 80062f6:	9903      	ldr	r1, [sp, #12]
 80062f8:	1a5b      	subs	r3, r3, r1
 80062fa:	42ab      	cmp	r3, r5
 80062fc:	dcf2      	bgt.n	80062e4 <_printf_i+0x220>
 80062fe:	e7eb      	b.n	80062d8 <_printf_i+0x214>
 8006300:	2500      	movs	r5, #0
 8006302:	f104 0619 	add.w	r6, r4, #25
 8006306:	e7f5      	b.n	80062f4 <_printf_i+0x230>
 8006308:	080065bb 	.word	0x080065bb
 800630c:	080065cc 	.word	0x080065cc

08006310 <memchr>:
 8006310:	4603      	mov	r3, r0
 8006312:	b510      	push	{r4, lr}
 8006314:	b2c9      	uxtb	r1, r1
 8006316:	4402      	add	r2, r0
 8006318:	4293      	cmp	r3, r2
 800631a:	4618      	mov	r0, r3
 800631c:	d101      	bne.n	8006322 <memchr+0x12>
 800631e:	2000      	movs	r0, #0
 8006320:	e003      	b.n	800632a <memchr+0x1a>
 8006322:	7804      	ldrb	r4, [r0, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	428c      	cmp	r4, r1
 8006328:	d1f6      	bne.n	8006318 <memchr+0x8>
 800632a:	bd10      	pop	{r4, pc}

0800632c <memcpy>:
 800632c:	440a      	add	r2, r1
 800632e:	4291      	cmp	r1, r2
 8006330:	f100 33ff 	add.w	r3, r0, #4294967295
 8006334:	d100      	bne.n	8006338 <memcpy+0xc>
 8006336:	4770      	bx	lr
 8006338:	b510      	push	{r4, lr}
 800633a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800633e:	4291      	cmp	r1, r2
 8006340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006344:	d1f9      	bne.n	800633a <memcpy+0xe>
 8006346:	bd10      	pop	{r4, pc}

08006348 <memmove>:
 8006348:	4288      	cmp	r0, r1
 800634a:	b510      	push	{r4, lr}
 800634c:	eb01 0402 	add.w	r4, r1, r2
 8006350:	d902      	bls.n	8006358 <memmove+0x10>
 8006352:	4284      	cmp	r4, r0
 8006354:	4623      	mov	r3, r4
 8006356:	d807      	bhi.n	8006368 <memmove+0x20>
 8006358:	1e43      	subs	r3, r0, #1
 800635a:	42a1      	cmp	r1, r4
 800635c:	d008      	beq.n	8006370 <memmove+0x28>
 800635e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006366:	e7f8      	b.n	800635a <memmove+0x12>
 8006368:	4601      	mov	r1, r0
 800636a:	4402      	add	r2, r0
 800636c:	428a      	cmp	r2, r1
 800636e:	d100      	bne.n	8006372 <memmove+0x2a>
 8006370:	bd10      	pop	{r4, pc}
 8006372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800637a:	e7f7      	b.n	800636c <memmove+0x24>

0800637c <_free_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4605      	mov	r5, r0
 8006380:	2900      	cmp	r1, #0
 8006382:	d043      	beq.n	800640c <_free_r+0x90>
 8006384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006388:	1f0c      	subs	r4, r1, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	bfb8      	it	lt
 800638e:	18e4      	addlt	r4, r4, r3
 8006390:	f000 f8d0 	bl	8006534 <__malloc_lock>
 8006394:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <_free_r+0x94>)
 8006396:	6813      	ldr	r3, [r2, #0]
 8006398:	4610      	mov	r0, r2
 800639a:	b933      	cbnz	r3, 80063aa <_free_r+0x2e>
 800639c:	6063      	str	r3, [r4, #4]
 800639e:	6014      	str	r4, [r2, #0]
 80063a0:	4628      	mov	r0, r5
 80063a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a6:	f000 b8cb 	b.w	8006540 <__malloc_unlock>
 80063aa:	42a3      	cmp	r3, r4
 80063ac:	d90a      	bls.n	80063c4 <_free_r+0x48>
 80063ae:	6821      	ldr	r1, [r4, #0]
 80063b0:	1862      	adds	r2, r4, r1
 80063b2:	4293      	cmp	r3, r2
 80063b4:	bf01      	itttt	eq
 80063b6:	681a      	ldreq	r2, [r3, #0]
 80063b8:	685b      	ldreq	r3, [r3, #4]
 80063ba:	1852      	addeq	r2, r2, r1
 80063bc:	6022      	streq	r2, [r4, #0]
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	6004      	str	r4, [r0, #0]
 80063c2:	e7ed      	b.n	80063a0 <_free_r+0x24>
 80063c4:	461a      	mov	r2, r3
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	b10b      	cbz	r3, 80063ce <_free_r+0x52>
 80063ca:	42a3      	cmp	r3, r4
 80063cc:	d9fa      	bls.n	80063c4 <_free_r+0x48>
 80063ce:	6811      	ldr	r1, [r2, #0]
 80063d0:	1850      	adds	r0, r2, r1
 80063d2:	42a0      	cmp	r0, r4
 80063d4:	d10b      	bne.n	80063ee <_free_r+0x72>
 80063d6:	6820      	ldr	r0, [r4, #0]
 80063d8:	4401      	add	r1, r0
 80063da:	1850      	adds	r0, r2, r1
 80063dc:	4283      	cmp	r3, r0
 80063de:	6011      	str	r1, [r2, #0]
 80063e0:	d1de      	bne.n	80063a0 <_free_r+0x24>
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4401      	add	r1, r0
 80063e8:	6011      	str	r1, [r2, #0]
 80063ea:	6053      	str	r3, [r2, #4]
 80063ec:	e7d8      	b.n	80063a0 <_free_r+0x24>
 80063ee:	d902      	bls.n	80063f6 <_free_r+0x7a>
 80063f0:	230c      	movs	r3, #12
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	e7d4      	b.n	80063a0 <_free_r+0x24>
 80063f6:	6820      	ldr	r0, [r4, #0]
 80063f8:	1821      	adds	r1, r4, r0
 80063fa:	428b      	cmp	r3, r1
 80063fc:	bf01      	itttt	eq
 80063fe:	6819      	ldreq	r1, [r3, #0]
 8006400:	685b      	ldreq	r3, [r3, #4]
 8006402:	1809      	addeq	r1, r1, r0
 8006404:	6021      	streq	r1, [r4, #0]
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	6054      	str	r4, [r2, #4]
 800640a:	e7c9      	b.n	80063a0 <_free_r+0x24>
 800640c:	bd38      	pop	{r3, r4, r5, pc}
 800640e:	bf00      	nop
 8006410:	20000130 	.word	0x20000130

08006414 <_malloc_r>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	1ccd      	adds	r5, r1, #3
 8006418:	f025 0503 	bic.w	r5, r5, #3
 800641c:	3508      	adds	r5, #8
 800641e:	2d0c      	cmp	r5, #12
 8006420:	bf38      	it	cc
 8006422:	250c      	movcc	r5, #12
 8006424:	2d00      	cmp	r5, #0
 8006426:	4606      	mov	r6, r0
 8006428:	db01      	blt.n	800642e <_malloc_r+0x1a>
 800642a:	42a9      	cmp	r1, r5
 800642c:	d903      	bls.n	8006436 <_malloc_r+0x22>
 800642e:	230c      	movs	r3, #12
 8006430:	6033      	str	r3, [r6, #0]
 8006432:	2000      	movs	r0, #0
 8006434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006436:	f000 f87d 	bl	8006534 <__malloc_lock>
 800643a:	4921      	ldr	r1, [pc, #132]	; (80064c0 <_malloc_r+0xac>)
 800643c:	680a      	ldr	r2, [r1, #0]
 800643e:	4614      	mov	r4, r2
 8006440:	b99c      	cbnz	r4, 800646a <_malloc_r+0x56>
 8006442:	4f20      	ldr	r7, [pc, #128]	; (80064c4 <_malloc_r+0xb0>)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	b923      	cbnz	r3, 8006452 <_malloc_r+0x3e>
 8006448:	4621      	mov	r1, r4
 800644a:	4630      	mov	r0, r6
 800644c:	f000 f862 	bl	8006514 <_sbrk_r>
 8006450:	6038      	str	r0, [r7, #0]
 8006452:	4629      	mov	r1, r5
 8006454:	4630      	mov	r0, r6
 8006456:	f000 f85d 	bl	8006514 <_sbrk_r>
 800645a:	1c43      	adds	r3, r0, #1
 800645c:	d123      	bne.n	80064a6 <_malloc_r+0x92>
 800645e:	230c      	movs	r3, #12
 8006460:	4630      	mov	r0, r6
 8006462:	6033      	str	r3, [r6, #0]
 8006464:	f000 f86c 	bl	8006540 <__malloc_unlock>
 8006468:	e7e3      	b.n	8006432 <_malloc_r+0x1e>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	1b5b      	subs	r3, r3, r5
 800646e:	d417      	bmi.n	80064a0 <_malloc_r+0x8c>
 8006470:	2b0b      	cmp	r3, #11
 8006472:	d903      	bls.n	800647c <_malloc_r+0x68>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	441c      	add	r4, r3
 8006478:	6025      	str	r5, [r4, #0]
 800647a:	e004      	b.n	8006486 <_malloc_r+0x72>
 800647c:	6863      	ldr	r3, [r4, #4]
 800647e:	42a2      	cmp	r2, r4
 8006480:	bf0c      	ite	eq
 8006482:	600b      	streq	r3, [r1, #0]
 8006484:	6053      	strne	r3, [r2, #4]
 8006486:	4630      	mov	r0, r6
 8006488:	f000 f85a 	bl	8006540 <__malloc_unlock>
 800648c:	f104 000b 	add.w	r0, r4, #11
 8006490:	1d23      	adds	r3, r4, #4
 8006492:	f020 0007 	bic.w	r0, r0, #7
 8006496:	1ac2      	subs	r2, r0, r3
 8006498:	d0cc      	beq.n	8006434 <_malloc_r+0x20>
 800649a:	1a1b      	subs	r3, r3, r0
 800649c:	50a3      	str	r3, [r4, r2]
 800649e:	e7c9      	b.n	8006434 <_malloc_r+0x20>
 80064a0:	4622      	mov	r2, r4
 80064a2:	6864      	ldr	r4, [r4, #4]
 80064a4:	e7cc      	b.n	8006440 <_malloc_r+0x2c>
 80064a6:	1cc4      	adds	r4, r0, #3
 80064a8:	f024 0403 	bic.w	r4, r4, #3
 80064ac:	42a0      	cmp	r0, r4
 80064ae:	d0e3      	beq.n	8006478 <_malloc_r+0x64>
 80064b0:	1a21      	subs	r1, r4, r0
 80064b2:	4630      	mov	r0, r6
 80064b4:	f000 f82e 	bl	8006514 <_sbrk_r>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d1dd      	bne.n	8006478 <_malloc_r+0x64>
 80064bc:	e7cf      	b.n	800645e <_malloc_r+0x4a>
 80064be:	bf00      	nop
 80064c0:	20000130 	.word	0x20000130
 80064c4:	20000134 	.word	0x20000134

080064c8 <_realloc_r>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	4607      	mov	r7, r0
 80064cc:	4614      	mov	r4, r2
 80064ce:	460e      	mov	r6, r1
 80064d0:	b921      	cbnz	r1, 80064dc <_realloc_r+0x14>
 80064d2:	4611      	mov	r1, r2
 80064d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064d8:	f7ff bf9c 	b.w	8006414 <_malloc_r>
 80064dc:	b922      	cbnz	r2, 80064e8 <_realloc_r+0x20>
 80064de:	f7ff ff4d 	bl	800637c <_free_r>
 80064e2:	4625      	mov	r5, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064e8:	f000 f830 	bl	800654c <_malloc_usable_size_r>
 80064ec:	42a0      	cmp	r0, r4
 80064ee:	d20f      	bcs.n	8006510 <_realloc_r+0x48>
 80064f0:	4621      	mov	r1, r4
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7ff ff8e 	bl	8006414 <_malloc_r>
 80064f8:	4605      	mov	r5, r0
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d0f2      	beq.n	80064e4 <_realloc_r+0x1c>
 80064fe:	4631      	mov	r1, r6
 8006500:	4622      	mov	r2, r4
 8006502:	f7ff ff13 	bl	800632c <memcpy>
 8006506:	4631      	mov	r1, r6
 8006508:	4638      	mov	r0, r7
 800650a:	f7ff ff37 	bl	800637c <_free_r>
 800650e:	e7e9      	b.n	80064e4 <_realloc_r+0x1c>
 8006510:	4635      	mov	r5, r6
 8006512:	e7e7      	b.n	80064e4 <_realloc_r+0x1c>

08006514 <_sbrk_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	2300      	movs	r3, #0
 8006518:	4d05      	ldr	r5, [pc, #20]	; (8006530 <_sbrk_r+0x1c>)
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	f7fb f9a2 	bl	8001868 <_sbrk>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_sbrk_r+0x1a>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_sbrk_r+0x1a>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	200005a0 	.word	0x200005a0

08006534 <__malloc_lock>:
 8006534:	4801      	ldr	r0, [pc, #4]	; (800653c <__malloc_lock+0x8>)
 8006536:	f000 b811 	b.w	800655c <__retarget_lock_acquire_recursive>
 800653a:	bf00      	nop
 800653c:	200005a8 	.word	0x200005a8

08006540 <__malloc_unlock>:
 8006540:	4801      	ldr	r0, [pc, #4]	; (8006548 <__malloc_unlock+0x8>)
 8006542:	f000 b80c 	b.w	800655e <__retarget_lock_release_recursive>
 8006546:	bf00      	nop
 8006548:	200005a8 	.word	0x200005a8

0800654c <_malloc_usable_size_r>:
 800654c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006550:	1f18      	subs	r0, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfbc      	itt	lt
 8006556:	580b      	ldrlt	r3, [r1, r0]
 8006558:	18c0      	addlt	r0, r0, r3
 800655a:	4770      	bx	lr

0800655c <__retarget_lock_acquire_recursive>:
 800655c:	4770      	bx	lr

0800655e <__retarget_lock_release_recursive>:
 800655e:	4770      	bx	lr

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr
